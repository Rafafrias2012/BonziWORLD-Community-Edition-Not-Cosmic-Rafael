var admin = !1,
	espeaktts = !1,
	shiftenter = !1,
	safeMode = !1,
	allowCrossColors = !1,
	warnedUserAboutUGC = !1,
	dontUseMyLocation = !1,
	enable_skid_protect = !0,
	LoggedIn = !1,
	Room_ID = "",
	Bonzi_Name = "",
	Bonzi_Status = "";

function updateAds() {
	var e = $(window).height() - $(adElement).height(),
		t = e <= 250;
	t && (e = $(window).height()), $(adElement)[t ? "hide" : "show"](), $("#content").height(e)
}

function dragMoveListener(e) {
	var t = e.target,
		o = (parseFloat(t.getAttribute("data-x")) || 0) + e.dx,
		n = (parseFloat(t.getAttribute("data-y")) || 0) + e.dy;
	t.style.webkitTransform = t.style.transform = "translate(" + o + "px, " + n + "px)", t.setAttribute("data-x", o), t.setAttribute("data-y", n)
}

function _classCallCheck(e, t) {
	if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
}

function range(e, t) {
	for (var o = [], n = e; n <= t; n++) o.push(n);
	for (n = e; n >= t; n--) o.push(n);
	return o
}

function replaceAll(e, t, o) {
	return e.replace(new RegExp(t, "g"), o)
}

function s4() {
	return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1)
}

function youtubeParser(e) {
	var t = e.match(/^.*((youtube|youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(shorts\/)|(playlist\?list=)|(watch\?v=))([^#\&\?]*).*/);
	return !(!t || 11 != t[9].length) && t[9] || !(!t || 34 != t[9].length) && "playlist?list=" + t[9]
}

function rtimeOut(e, t) {
	var o, n = Date.now,
		i = window.requestAnimationFrame,
		a = n(),
		s = function() {
			n() - a < t ? o || i(s) : e()
		};
	return i(s), {
		clear: function() {
			o = 1
		}
	}
}

function rInterval(e, t) {
	var o, n = Date.now,
		i = window.requestAnimationFrame,
		a = n(),
		s = function() {
			n() - a < t || (a += t, e()), o || i(s)
		};
	return i(s), {
		clear: function() {
			o = 1
		}
	}
}

function linkify(e) {
	return e
}

function loadBonzis(e) {
	loadQueue.loadManifest([{
		id: "bonziBlack",
		src: "./img/agents/black.png"
	}, {
		id: "bonziBlue",
		src: "./img/agents/blue.png"
	}, {
		id: "bonziBrown",
		src: "./img/agents/brown.png"
	}, {
		id: "bonziGreen",
		src: "./img/agents/green.png"
	}, {
		id: "bonziPurple",
		src: "./img/agents/purple.png"
	}, {
		id: "bonziRed",
		src: "./img/agents/red.png"
	}, {
		id: "bonziPink",
		src: "./img/agents/pink.png"
	}, {
		id: "topjej",
		src: "./img/misc/topjej.png"
	}]), loadQueue.on("fileload", (function(e) {
		loadDone.push(e.item.id)
	}), this), e && loadQueue.on("complete", e, this)
}

function loadTest() {
	var e = ["./img/cursors/hourglas.gif", "./img/cursors/hourgla2.gif", "./img/cursors/hourgla3.gif", "./img/cursors/barber.gif", "./img/cursors/horse.gif", "./img/cursors/wagtail.gif", "./img/cursors/drum.gif", "./img/cursors/dinosaur.gif", "./img/cursors/dinosau2.gif", "./img/cursors/banana.gif", "./img/cursors/metronom.gif", "./img/cursors/piano.gif", "./img/cursors/handwait.gif", "./img/cursors/stopwtch.gif"];
	$("#login_card").hide(), $("#login_error").hide(), $("#login_load").show(), document.getElementById("page_login").style.cursor = "wait", login(), document.getElementById("loading_cursor").src = e[Math.floor(Math.random() * e.length)]
}

function login() {
	if (!0 === $("#login_name").val().includes('"')) return socket.disconnect() && $("#page_error").hide();
	if (!0 === $("#login_name").val().includes("'")) return socket.disconnect() && $("#page_error").hide();
	if (!0 === $("#login_name").val().includes("&")) return socket.disconnect() && $("#page_error").hide();
	if (!0 === $("#login_name").val().includes("#")) return socket.disconnect() && $("#page_error").hide();
	if (Bonzi_Name = $("#login_name").val() || "BonziBUDDY", "bonzi_weather" == $("#login_room").val()) {
		var e = confirm("WARNING: If you are recording/streaming on this site, we highly recommend you click cancel to use a different location. This is for your own safety.");
		dontUseMyLocation = 0 == e
	}
	setTimeout((function() {
		bonzisocket.sendToServer("login", {
			name: $("#login_name").val(),
			room: $("#login_room").val()
		}), setup()
	}), 954), (new Date).setDate((new Date).getDate() + 365), getCookie("name"), "" == $("#login_name").val() ? setCookie("name", "BonziBUDDY", 365) : setCookie("name", encodeURIComponent($("#login_name").val()), 365)
}

function login2() {
	safeMode ? bonzisocket.sendToServer("login", {
		name: $("#login_name2").val(),
		room: $("#login_room2").val()
	}) : bonzisocket.sendToServer(window.bonzi_guid + "_login_" + window.testguid, {
		name: $("#login_name2").val(),
		room: $("#login_room2").val()
	}), setup()
}

function errorJS() {
	"none" != $("#page_ban").css("display") && "none" != $("#page_kick").css("display") || $("#page_jserror").show()
}

function errorFatal(e) {
	document.getElementById("error").play(), "none" != $("#page_ban").css("display") && "none" != $("#page_kick").css("display") || $("#page_error").show()
}

function errorReboot(e) {
	document.getElementById("error").play(), $("#page_reboot").show()
}

function setup() {
	io = null, socket = null, $("#chat_send").click(sendInput), $("#chat_message").keypress((function(e) {
		13 == e.which && e.shiftKey && shiftenter ? $("#chat_message").val($("#chat_message").val() + "<br>") : 13 == e.which && sendInput()
	})), bonzisocket.on("replaceTVWithURL", (function(e) {
		function t(e) {
			e.target.setVolume(100), e.target.playVideo()
		}
		if ($("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>"), 23 == e.hourAmount || 22 == e.hourAmount && e.minuteAmount >= 9) new YT.Player("bonzi_tv_player", {
			height: "100%",
			width: "100%",
			videoId: "kQsoV69uGIY",
			host: `${window.location.protocol}//www.youtube.com`,
			playerVars: {
				autoplay: 1,
				modestbranding: 1,
				controls: 1,
				showinfo: 1,
				loop: 1
			},
			events: {
				onReady: t,
				onStateChange: function(e) {
					if (0 === e.data) {
						$("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>");
						new YT.Player("bonzi_tv_player", {
							height: "100%",
							width: "100%",
							videoId: "kQsoV69uGIY",
							host: `${window.location.protocol}//www.youtube.com`,
							playerVars: {
								autoplay: 1,
								modestbranding: 1,
								controls: 1,
								showinfo: 1
							},
							events: {
								onStateChange: function(e) {
									if (0 === e.data) bonzisocket.sendToServer("updatebonzitv")
								}
							}
						})
					}
				}
			}
		});
		else {
			new YT.Player("bonzi_tv_player", {
				height: "100%",
				width: "100%",
				videoId: e.identId,
				host: `${window.location.protocol}//www.youtube.com`,
				playerVars: {
					autoplay: 1,
					modestbranding: 1,
					controls: 1,
					showinfo: 1
				},
				events: {
					onReady: t,
					onStateChange: function(o) {
						if (0 === o.data) {
							$("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>");
							var n = new YT.Player("bonzi_tv_player", {
								height: "100%",
								width: "100%",
								videoId: e.id,
								host: `${window.location.protocol}//www.youtube.com`,
								playerVars: {
									autoplay: 1,
									modestbranding: 1,
									controls: 1,
									showinfo: 1
								},
								events: {
									onReady: t,
									onStateChange: function(e) {
										switch (e.data) {
											case 0:
												bonzisocket.sendToServer("updatebonzitv");
												break;
											case 1:
												updateCurrentTime = setInterval((function() {
													bonzisocket.sendToServer("setbonzitvtime", {
														curtime: n.playerInfo.currentTime
													}), console.log(n.playerInfo.currentTime)
												}), 5e3)
										}
									}
								}
							})
						}
					}
				}
			});
			clearInterval(updateCurrentTime)
		}
	})), bonzisocket.on("room", (function(e) {
		if ("news" == e.room) {
			$("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>");
			var t = new YT.Player("bonzi_tv_player", {
				height: "80%",
				width: "100%",
				videoId: "9Auq9mYxFEE",
				host: `${window.location.protocol}//www.youtube.com`,
				playerVars: {
					autoplay: 1,
					modestbranding: 1,
					controls: 1,
					showinfo: 1
				}
			})
		} else if ("why" == e.room) {
			$("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>");
			t = new YT.Player("bonzi_tv_player", {
				height: "80%",
				width: "100%",
				videoId: "3RpxJT5w7Tc",
				host: `${window.location.protocol}//www.youtube.com`,
				playerVars: {
					autoplay: 1,
					modestbranding: 1,
					controls: 1,
					showinfo: 1,
					loop: 1
				}
			})
		} else if ("area_51" == e.room) {
			$("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>");
			t = new YT.Player("bonzi_tv_player", {
				height: "80%",
				width: "100%",
				videoId: "TRc85qoNo6w",
				host: `${window.location.protocol}//www.youtube.com`,
				playerVars: {
					autoplay: 1,
					modestbranding: 1,
					controls: 1,
					showinfo: 1,
					loop: 1
				}
			})
		} else if ("poland" == e.room) {
			$("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>");
			t = new YT.Player("bonzi_tv_player", {
				height: "80%",
				width: "100%",
				videoId: "rRPQs_kM_nw",
				host: `${window.location.protocol}//www.youtube.com`,
				playerVars: {
					autoplay: 1,
					modestbranding: 1,
					controls: 1,
					showinfo: 1,
					loop: 1
				}
			})
		} else if ("bonzi_weather" == e.room) $("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>"), theme('#content{background-image:url("/img/desktop/logo.tv.png"), url("/img/desktop/bg.png");} #bonzi_tv_yt{background-image:url("/img/desktop/logo.tv.png"), url("/img/desktop/bg.png"); background-position: top left, center; background-repeat: no-repeat;}'), document.getElementById("bonzi_tv").innerHTML = dontUseMyLocation ? '<iframe id="bonzi_tv_yt" style="position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;" src="//weatherscan.net/?long_island" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>' : '<iframe id="bonzi_tv_yt" style="position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;" src="//weatherscan.net/" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>';
		else if ("bonzi_tv" == e.room) {
			$("#room_info").append("<br><font color='red'><h3>BonziTV is in early development and is also a work in progress project. Expect bugs!<br>Report any bugs to the discord or DM Seamus.</h3></font>"), $("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none; background-image:url('/img/desktop/logo.tv.png'), url('/img/desktop/bg.png');'></div>"), theme('#content {background-image:url("/img/desktop/logo.tv.png"); background-repeat: no-repeat; background-position: top-left} #bonzi_canvas {background-image:url("/img/desktop/logo.tv.png"); background-repeat: no-repeat; background-position: top-left}');
			t = new YT.Player("bonzi_tv_player", {
				height: "100%",
				width: "100%",
				videoId: e.vid,
				host: `${window.location.protocol}//www.youtube.com`,
				playerVars: {
					start: e.curtime,
					autoplay: 1,
					modestbranding: 1,
					controls: 1,
					showinfo: 1
				},
				events: {
					onReady: function(e) {
						e.target.setVolume(100), e.target.playVideo()
					},
					onStateChange: function(e) {
						switch (e.data) {
							case 0:
								bonzisocket.sendToServer("updatebonzitv");
								break;
							case 1:
								updateCurrentTime = setInterval((function() {
									bonzisocket.sendToServer("setbonzitvtime", {
										curtime: t.playerInfo.currentTime
									}), console.log(t.playerInfo.currentTime)
								}), 5e3)
						}
					}
				}
			});
			$("#bonzi_canvas").click((function() {
				t.play()
			}))
		}
		$("#room_owner")[e.isOwner ? "show" : "hide"](), $("#room_public")[e.isPublic ? "show" : "hide"](), $("#room_private")[e.isPublic ? "hide" : "show"](), $("#room_id").text(e.room)
	})), bonzisocket.on("updateAll", (function(e) {
		$("#page_login").hide(), usersPublic = e.usersPublic, usersUpdate(), BonziHandler.bonzisCheck(), $("#log").show()
	})), bonzisocket.on("update", (function(e) {
		window.usersPublic[e.guid] = e.userPublic, usersUpdate(), BonziHandler.bonzisCheck()
	})), bonzisocket.on("background", (function(e) {
		document.getElementById("content").style.backgroundColor = e.background
	})), bonzisocket.on("updateAll", (function(e) {
		$("#page_login").hide(), usersPublic = e.usersPublic, usersUpdate(), BonziHandler.bonzisCheck()
	})), bonzisocket.on("update", (function(e) {
		window.usersPublic[e.guid] = e.userPublic, usersUpdate(), BonziHandler.bonzisCheck()
	})), bonzisocket.on("blockedby", (function(e) {
		setInterval((function() {
			var t = bonzis[e];
			t.mute = !0, t.blocked = !0
		}), 1)
	})), bonzisocket.on("talk", (function(e) {
		var t = bonzis[e.guid];
		e.text = e.text.replaceAll(/{NAME}/gi, "BonziBUDDY"), t.cancel(), t.runSingleEvent([{
			type: "text",
			text: e.text,
			say: e.say || e.text
		}])
	})), bonzisocket.on("joke", (function(e) {
		var t = bonzis[e.guid];
		t.rng = new Math.seedrandom(e.rng), t.cancel(), t.joke()
	})), bonzisocket.on("behh", (function(e) {
		var t = bonzis[e.guid];
		t.rng = new Math.seedrandom(e.rng), t.cancel(), t.behh()
	})), bonzisocket.on("youtube", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.youtube(e.vid)
	})), bonzisocket.on("movestart", (function(e) {
		var t = bonzis[e.guid];
		if (!t.mute) {
			t.runSingleEvent([{
				type: "anim",
				anim: "surf_across_fwd",
				ticks: 15
			}]), "peedy" == t.color ? (null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/peedy_surfintro.mp3"), window.emoteaudio.play()) : "max" == t.color ? (null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/max_surfintro.mp3"), window.emoteaudio.play()) : (null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/jump.mp3"), window.emoteaudio.play())
		}
	})), bonzisocket.on("present", (function(e) {
		var t = bonzis[e.guid];
		if (!t.mute) {
			t.cancel(), t.runSingleEvent([{
				type: "anim",
				anim: "present_fwd",
				ticks: 15
			}])
		}
	})), bonzisocket.on("slap", (function(e) {
		var t = bonzis[e.guid];
		if (!t.mute) {
			t.cancel(), t.runSingleEvent([{
				type: "anim",
				anim: "present_fwd",
				ticks: 15
			}, {
				type: "text",
				text: "SLAP!"
			}, {
				type: "idle"
			}])
		}
	})), bonzisocket.on("movefinish", (function(e) {
		var t = bonzis[e.guid];
		t.mute || (t.movefinish(), "peedy" == t.color ? (null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/peedy_surfintro.mp3"), window.emoteaudio.play()) : "max" == t.color ? (null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/max_surfintro.mp3"), window.emoteaudio.play()) : (null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/boom.mp3"), window.emoteaudio.play()))
	})), bonzisocket.on("video", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.video(e.vid)
	})), bonzisocket.on("midi", (function(e) {
		var t = bonzis[e.guid];
		MIDIjs.play(e.midi), t.userPublic.name = t.userPublic.name.replace(/ (playing MIDI)/gi, "") + " (playing MIDI)", t.updateName()
	})), bonzisocket.on("video_legacy", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.video_legacy(e.vid)
	})), bonzisocket.on("bitview", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.bitview(e.vid)
	})), bonzisocket.on("img", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.img(e.vid)
	})), bonzisocket.on("letsplay", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.letsplay(e.vid)
	})), bonzisocket.on("letsplay2", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.letsplay2()
	})), bonzisocket.on("letsplay3", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.letsplay3()
	})), bonzisocket.on("iframe", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.iframe(e.vid)
	})), bonzisocket.on("vlare", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.vlare(e.vid)
	})), bonzisocket.on("fact", (function(e) {
		var t = bonzis[e.guid];
		t.rng = new Math.seedrandom(e.rng), t.cancel(), t.fact()
	})), bonzisocket.on("backflip", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.backflip(e.swag), (e = new Audio("/sfx/backflip.mp3")).play()
	})), bonzisocket.on("gravity", (function(e) {
		window.gravity = !0, $(".bonzi").css({
			marginLeft: 0,
			marginTop: 0,
			left: 0,
			top: 0
		}), $(".bonzi_placeholder").removeClass("box2d"), $("body").jGravity({
			target: ".bonzi_placeholder",
			weight: 25,
			depth: 5,
			drag: !0
		})
	})), bonzisocket.on("dvdbounce", (function(e) {
		var t = bonzis[e.guid];
		t && (t.cancel(), t.dvdbounce(e.status || "off"))
	})), bonzisocket.on("cooldown", (function(e) {
		speak.play("Cooldown activated: please do not spam.")
	})), bonzisocket.on("sad", (function(e) {
		var t = bonzis[e.guid];
		t.sad(), "robby" === t.color && (null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/robby_sad.mp3"), window.emoteaudio.play())
	})), bonzisocket.on("shrug", (function(e) {
		bonzis[e.guid].shrug()
	})), bonzisocket.on("greet", (function(e) {
		bonzis[e.guid].greet()
	})), bonzisocket.on("think", (function(e) {
		bonzis[e.guid].think()
	})), bonzisocket.on("wave", (function(e) {
		bonzis[e.guid].mp3e()
	})), bonzisocket.on("banana", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.banana()
	})), bonzisocket.on("nod", (function(e) {
		bonzis[e.guid].nod()
	})), bonzisocket.on("acknowledge", (function(e) {
		bonzis[e.guid].nod()
	})), bonzisocket.on("banana", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.banana()
	})), bonzisocket.on("surprised", (function(e) {
		bonzis[e.guid].surprised(), null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/surprised.mp3"), window.emoteaudio.play()
	})), bonzisocket.on("laugh", (function(e) {
		bonzis[e.guid].laugh(), null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/laugh.mp3"), window.emoteaudio.play()
	})), bonzisocket.on("write", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.write()
	})), bonzisocket.on("write_once", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.write2(), setTimeout((function() {
			null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/write.mp3"), window.emoteaudio.play()
		}), 1100)
	})), bonzisocket.on("write_infinite", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.write3(), setTimeout((function() {
			null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/write.mp3"), window.emoteaudio.play()
		}), 1100)
	})), bonzisocket.on("clap", (function(e) {
		var t = bonzis[e.guid];
		t.clap(), setTimeout((function() {
			"robot" == t.color ? (null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/zap5.mp3"), window.emoteaudio.play()) : (null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/clap.mp3"), window.emoteaudio.play())
		}), 600)
	})), bonzisocket.on("swag", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.swag()
	})), bonzisocket.on("confused", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.confused()
	})), bonzisocket.on("earth", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.earth()
	})), bonzisocket.on("grin", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.grin()
	})), bonzisocket.on("join", (function(e) {
		var t = bonzis[e.guid];
		bonzisocket.sendToServer("login", {
			name: t.name.val(),
			room: e.rid
		}), setup()
	})), bonzisocket.on("surfjoin", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.surfjoin()
	})), bonzisocket.on("surfleave", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.surfleave()
	})), bonzisocket.on("surf", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.surf(), "peedy" == t.color ? (null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/peedy_surfintro.mp3"), window.emoteaudio.play()) : (null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/jump_off.mp3"), window.emoteaudio.play())
	})), bonzisocket.on("bang", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.bang(), setTimeout((function() {
			null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/bang.mp3"), window.emoteaudio.play()
		}), 300)
	})), bonzisocket.on("clap_clippy", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.clap_clippy(), setTimeout((function() {
			null != window.emoteaudio && window.emoteaudio.pause(), window.emoteaudio = new Audio("/sfx/wow.mp3"), window.emoteaudio.play()
		}), 400)
	})), bonzisocket.on("alert", (function(e) {
		bonziAlert(e)
	})), bonzisocket.on("asshole", (function(e) {
		var t = bonzis[e.guid];
		e.target = e.target.replaceAll(/{NAME}/gi, "BonziBUDDY"), t.cancel(), t.asshole(e.target)
	})), bonzisocket.on("bass", (function(e) {
		var t = bonzis[e.guid];
		e.target = e.target.replaceAll(/{NAME}/gi, "BonziBUDDY"), t.cancel(), t.bass(e.target)
	})), bonzisocket.on("beggar", (function(e) {
		var t = bonzis[e.guid];
		e.target = e.target.replaceAll(/{NAME}/gi, "BonziBUDDY"), t.cancel(), t.beggar(e.target)
	})), bonzisocket.on("kiddie", (function(e) {
		var t = bonzis[e.guid];
		e.target = e.target.replaceAll(/{NAME}/gi, "BonziBUDDY"), t.cancel(), t.kiddie(e.target)
	})), bonzisocket.on("logofag", (function(e) {
		var t = bonzis[e.guid];
		e.target = e.target.replaceAll(/{NAME}/gi, "BonziBUDDY"), t.cancel(), t.logofag(e.target)
	})), bonzisocket.on("gofag", (function(e) {
		var t = bonzis[e.guid];
		e.target = e.target.replaceAll(/{NAME}/gi, "BonziBUDDY"), t.cancel(), t.goTard(e.target)
	})), bonzisocket.on("forcer", (function(e) {
		var t = bonzis[e.guid];
		e.target = e.target.replaceAll(/{NAME}/gi, "BonziBUDDY"), t.cancel(), t.forcer(e.target)
	})), bonzisocket.on("welcome", (function(e) {
		var t = bonzis[e.guid];
		e.target = e.target.replaceAll(/{NAME}/gi, "BonziBUDDY"), t.cancel(), t.welcome(e.target)
	})), bonzisocket.on("muted", (function(e) {
		var t = bonzis[e.guid];
		e.target = e.target.replaceAll(/{NAME}/gi, "BonziBUDDY"), t.cancel(), t.muted(e.target)
	})), bonzisocket.on("owo", (function(e) {
		var t = bonzis[e.guid];
		e.target = e.target.replaceAll(/{NAME}/gi, "BonziBUDDY"), t.cancel(), t.owo(e.target)
	})), bonzisocket.on("uwu", (function(e) {
		var t = bonzis[e.guid];
		e.target = e.target.replaceAll(/{NAME}/gi, "BonziBUDDY"), t.cancel(), t.uwu(e.target)
	})), bonzisocket.on("triggered", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.runSingleEvent(t.data.event_list_triggered)
	})), bonzisocket.on("blackhat", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.blackhat()
	})), bonzisocket.on("sing", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.sing()
	})), bonzisocket.on("linux", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.runSingleEvent(t.data.event_list_linux)
	})), bonzisocket.on("move", (function(e) {
		var t = bonzis[e.guid];
		t.mute || t.move(e.posX, e.posY)
	})), bonzisocket.on("pawn", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.runSingleEvent(t.data.event_list_pawn)
	})), bonzisocket.on("bees", (function(e) {
		var t = bonzis[e.guid];
		t.cancel(), t.bees()
	})), bonzisocket.on("open_evaljs", (function(e) {
		$("#evaljs").css("display", "block")
	})), bonzisocket.on("evaljs", (function(e) {
		$("#evaljs_console").append("\n>> " + e.output)
	})), bonzisocket.on("open_ban_menu", (function(e) {
		banmenu()
	})), bonzisocket.on("vaporwave", (function(e) {
		$("body").addClass("vaporwave")
	})), bonzisocket.on("jumpscare", (function(e) {
		document.getElementById("jumpscare").play(), $("body").addClass("jumpscare")
	})), bonzisocket.on("acid", (function(e) {
		init(), $("body").addClass("acidmode")
	})), bonzisocket.on("unvaporwave", (function(e) {
		$("body").removeClass("vaporwave")
	})), bonzisocket.on("leave", (function(e) {
		var t = bonzis[e.guid];
		void 0 !== t && (setTimeout((function() {
			if ("diogo" == t.color) new Audio("/sfx/diogo_surfgone.mp3").play();
			else if ("peedy" == t.color) {
				new Audio("/sfx/peedy_surfaway.mp3").play()
			} else if ("genius" == t.color) {
				new Audio("/sfx/genius_surfaway.mp3").play()
			} else if ("merlin" == t.color) {
				new Audio("/sfx/merlin_surfgone.mp3").play()
			} else if ("genie" == t.color) {
				new Audio("/sfx/genie_surfgone.mp3").play()
			} else if ("robby" == t.color) {
				new Audio("/sfx/robby_surfintro.mp3").play()
			} else if ("clippy" == t.color) {
				new Audio("/sfx/clippy_surfgone.mp3").play()
			} else if ("kairu" == t.color) {
				new Audio("/sfx/kairu_surfaway.mp3").play()
			} else {
				new Audio("/sfx/bye.mp3").play()
			}
		}), 600), t.exit(function(e) {
			this.deconstruct(), delete bonzis[e.guid], delete usersPublic[e.guid], usersUpdate()
		}.bind(t, e)))
	}))
}

function bonziAlert(e) {
	"object" != typeof e && (e = {
		msg: e
	});
	let t = document.getElementById("b_alert").content.children[0].cloneNode(!0),
		o = t.children[0],
		n = t.children[2],
		i = t.children[4];
	n[e.sanitize ? "innerHTML" : "innerText"] = e.msg, e.title ? o[e.sanitize ? "innerHTML" : "innerText"] = e.title : o.remove(), i.innerText = e.button || "OK", i.onclick = function() {
		t.remove()
	}, document.getElementById("content").appendChild(t), i.focus()
}

function bonziUpdateAlert(e) {
	"object" != typeof e && (e = {
		msg: e
	});
	let t = document.getElementById("b_alert").content.children[0].cloneNode(!0),
		o = t.children[0],
		n = t.children[2],
		i = t.children[4];
	n.innerHTML = e.msg + '<br><br>Get the Chrome App!<br><a class="app_chrome" href="https://chrome.google.com/webstore/detail/bonziworld/mbmkblgjegkiaggajjiheicbmfjaldcf" target="_blank"><img src="./img/app/chrome.png" alt="Chrome Extension"></a><br><small>Warning: Users under the age of 18 may not have access to the extension unless if they have an account with a birth date higher than the required Mature content rating.</small>', e.title ? o.innerHTML = e.title : o.remove(), i.innerText = e.button || "OK", i.onclick = function() {
		t.remove()
	}, document.getElementById("content").appendChild(t), i.focus()
}

function usersUpdate() {
	usersKeys = Object.keys(usersPublic), usersAmt = usersKeys.length, $("#memcount").html("Bonzis Count: " + usersKeys.length)
}

function sendInput() {
	var e = $("#chat_message").val();
	if ($("#chat_message").val(""), e.length > 0) {
		var t = youtubeParser(e);
		if (t) return void bonzisocket.sendToServer("command", {
			list: ["youtube", t]
		});
		if ("/" == e.substring(1, 0)) {
			var o = e.substring(1).split(" ");
			bonzisocket.sendToServer("command", {
				list: o
			})
		} else bonzisocket.sendToServer("talk", {
			text: e
		})
	}
}

function touchHandler(e) {
	var t = e.changedTouches[0],
		o = "";
	switch (e.type) {
		case "touchstart":
			o = "mousedown";
			break;
		case "touchmove":
			o = "mousemove";
			break;
		case "touchend":
			o = "mouseup";
			break;
		default:
			return
	}
	var n = document.createEvent("MouseEvent");
	n.initMouseEvent(o, !0, !0, window, 1, t.screenX, t.screenY, t.clientX, t.clientY, !1, !1, !1, !1, 0, null), t.target.dispatchEvent(n)
}
$(document).mouseup((function() {
	var e = new Audio("./sfx/click.mp3");
	try {
		$(this).after(e.play())
	} catch (e) {}
}));
var adElement = "#ap_iframe";
$((function() {
	$((function() {})), $(window).resize(updateAds), $("body").on("DOMNodeInserted", adElement, updateAds), $("body").on("DOMNodeRemoved", adElement, updateAds)
}));
var _createClass = function() {
		function e(e, t) {
			for (var o = 0; o < t.length; o++) {
				var n = t[o];
				n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n)
			}
		}
		return function(t, o, n) {
			return o && e(t.prototype, o), n && e(t, n), t
		}
	}(),
	Bonzi = function() {
		function e(t, o) {
			this.stopSpeaking();
			var n = this,
				i = this;
			this.bounceColors = ["black", "blue", "brown", "green", "purple", "red", "pink"], _classCallCheck(this, e), this.overlayOffset = {
				left: 0,
				top: 0
			}, this.userPublic = o || {
				name: "BonziBUDDY",
				color: "purple",
				speed: 175,
				pitch: 50,
				sapi5pitch: 1,
				amplitude: 100,
				voice: "Adult Male #2, American English (TruVoice)"
			}, this.color = this.userPublic.color, this.moving = {
				speed: 4,
				direction: "ne"
			}, this._extras = {
				dvd: !1,
				dvdTick: 1
			}, this.colorPrev, this.data = window.BonziData, this.drag = !1, this.dragged = !1, this.eventQueue = [], this.eventRun = !0, this.event = null, this.willCancel = !1, this.run = !0, this.mute = !1, this.eventTypeToFunc = {
				anim: "updateAnim",
				html: "updateText",
				text: "updateText",
				idle: "updateIdle",
				add_random: "updateRandom",
				clearText: "clearDialog"
			}, this.id = void 0 === t ? s4() + s4() : t, this.rng = new Math.seedrandom(this.seed || this.id || Math.random()), this.selContainer = "#content", this.$container = $(this.selContainer), this.$container.append("\n\t\t\t<div id='bonzi_" + this.id + "' class='bonzi'>\n\t\t\t\t<div class='bonzi_name'><div class=\"name-inner\"><div class=\"icon\"></div><div class=\"name\"></div></div></div>\n\t\t\t\t\t<div class='bonzi_placeholder'></div>\n\t\t\t\t<div style='display:none' class='bubble'>\n\t\t\t\t\t<p class='bubble-content'></p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t"), this.selElement = "#bonzi_" + this.id, this.selDialog = this.selElement + " > .bubble", this.closeDialog = this.selElement + " > .bubble > .close-bubble", this.selDialogCont = this.selElement + " > .bubble > p", this.selNameWrap = this.selElement + " > .bonzi_name", this.selNameIcon = this.selElement + " > .bonzi_name > .name-inner > .icon", this.selNametag = this.selElement + " > .bonzi_name > .name-inner > .name", this.selCanvas = this.selElement + " > .bonzi_placeholder", $(this.selCanvas).width(this.data.size.x).height(this.data.size.y), this.$nameIcon = $(this.selNameIcon), this.$closeBtn = $(this.closeDialog), this.$element = $(this.selElement), this.$canvas = $(this.selCanvas), this.$dialog = $(this.selDialog), this.$dialogCont = $(this.selDialogCont), this.$nametag = $(this.selNametag), this.updateName(), $.data(this.$element[0], "parent", this), this.updateSprite(!0), this.generate_event = function(e, t, o) {
				this.stopSpeaking();
				var n = this;
				e[t]((function(e) {
					n[o](e)
				}))
			}, this.generate_event(this.$canvas, "mousedown", "mousedown"), this.generate_event($(window), "mousemove", "mousemove"), this.generate_event($(window), "mouseup", "mouseup"), setInterval((function() {
				i._extras && i._extras.dvd && i.dvdTick()
			}), 50);
			var a = this.maxCoords();
			null != this.userPublic.x && null != this.userPublic.y ? (this.x = this.userPublic.x, this.y = this.userPublic.y) : (this.x = a.x * this.rng(), this.y = a.y * this.rng()), this.move(), this.id == window.bonzi_guid && (window.myBonzi = this), bonzisocket.on("disconnect", (function() {
				window.kick || (n.deconstruct(), delete bonzis[n.id], delete usersPublic[n.id], usersUpdate(), reconnect())
			})), $.contextMenu({
				selector: this.selCanvas,
				build: function(e, t) {
					return {
						items: {
							cancel: {
								name: "Cancel",
								callback: function() {
									n.cancel()
								}
							},
							mute: {
								name: function() {
									return n.blocked ? "Mute" : n.mute ? "Unmute" : "Mute"
								},
								callback: function() {
									n.cancel(), n.mute = !n.mute
								}
							},
							hide: {
								name: function() {
									return "Hide"
								},
								callback: function() {
									n.cancel();
									var e = n;
									setTimeout((function() {
										if ("diogo" == e.color) new Audio("/sfx/diogo_surfgone.mp3").play();
										else if ("peedy" == e.color) {
											new Audio("/sfx/peedy_surfaway.mp3").play()
										} else if ("genius" == e.color) {
											new Audio("/sfx/genius_surfaway.mp3").play()
										} else if ("merlin" == e.color) {
											new Audio("/sfx/merlin_surfgone.mp3").play()
										} else if ("genie" == e.color) {
											new Audio("/sfx/genie_surfgone.mp3").play()
										} else if ("robby" == e.color) {
											new Audio("/sfx/robby_surfintro.mp3").play()
										} else if ("clippy" == e.color) {
											new Audio("/sfx/clippy_surfgone.mp3").play()
										} else if ("kairu" == e.color) {
											new Audio("/sfx/kairu_surfaway.mp3").play()
										} else {
											new Audio("/sfx/bye.mp3").play()
										}
									}), 600), void 0 !== e && n.exit(function() {
										this.deconstruct(), delete bonzis[n.id], delete usersPublic[n.id], usersUpdate()
									}.bind(e))
								}
							},
							insult: {
								name: "Insult",
								items: {
									asshole: {
										name: "Call an Asshole",
										callback: function() {
											bonzisocket.sendToServer("command", {
												list: ["asshole", n.userPublic.name]
											})
										}
									},
									goTard: {
										name: "Call a Go!Tard",
										callback: function() {
											bonzisocket.sendToServer("command", {
												list: ["gofag", n.userPublic.name]
											})
										}
									},
									logokid: {
										name: "Call a Logo Kid",
										callback: function() {
											bonzisocket.sendToServer("command", {
												list: ["logofag", n.userPublic.name]
											})
										}
									},
									bass: {
										name: "Call a Bass",
										callback: function() {
											bonzisocket.sendToServer("command", {
												list: ["bass", n.userPublic.name]
											})
										}
									},
									ud64alt2: {
										name: "Call a Bass 2",
										callback: function() {
											i.userPublic.color_cross.match(/gffgfghjghj/g) || bonzisocket.sendToServer("talk", {
												text: i.userPublic.name + " stop being a bass"
											})
										}
									}
								}
							},
							heyname: {
								name: "Hey, NAME!",
								callback: function() {
									bonzisocket.sendToServer("talk", {
										text: "Hey, " + n.userPublic.name + "!"
									})
								}
							},
							morecmds: {
								name: "More Commands..",
								items: {
									greetings: {
										name: "Greet",
										callback: function() {
											bonzisocket.sendToServer("command", {
												list: ["welcome", n.userPublic.name]
											})
										}
									},
									dm: {
										name: "DM",
										callback: function() {
											$("#page_dm").show(), $("#dm_send_to").text(n.userPublic.name), $("#dm_guid").val(n.id), $("#dm_input").focus()
										}
									},
									quote: {
										name: "Quote",
										callback: function() {
											n.last ? $("#chat_message").val("<blockquote>" + n.last + "</blockquote> ").focus() : alert("This person hasnt speaked yet")
										}
									},
									owo: {
										name: "Notice Bulge",
										callback: function() {
											bonzisocket.sendToServer("command", {
												list: ["owo", n.userPublic.name]
											})
										}
									},
									uwu: {
										name: "Notice Bulge 2",
										callback: function() {
											bonzisocket.sendToServer("command", {
												list: ["uwu", n.userPublic.name]
											})
										}
									},
									spy: {
										name: "Call a Spy",
										callback: function() {
											i.userPublic.color_cross.match(/gffgfghjghj/g) || bonzisocket.sendToServer("talk", {
												text: "That " + i.userPublic.name + " is a spy!"
											})
										}
									},
									sentry: {
										name: "Call a Sentry",
										callback: function() {
											i.userPublic.color_cross.match(/gffgfghjghj/g) || bonzisocket.sendToServer("talk", {
												text: "That " + i.userPublic.name + " is a sentry!"
											})
										}
									},
									sapping: {
										name: "Accuse of Sapping",
										callback: function() {
											i.userPublic.color_cross.match(/gffgfghjghj/g) || bonzisocket.sendToServer("talk", {
												text: i.userPublic.name + " sapping my sentry!"
											})
										}
									}
								}
							},
							modtools: {
								disabled: function() {
									return !admin
								},
								name: "Pope Tools",
								items: {
									givepopeto: {
										disabled: function() {
											return !admin
										},
										name: "Popeify",
										callback: function() {
											bonzisocket.sendToServer("command", {
												list: ["givepopeto", n.id]
											})
										}
									},
									givegodto: {
										disabled: function() {
											return !admin
										},
										name: "Godify",
										callback: function() {
											bonzisocket.sendToServer("command", {
												list: ["givegodto", n.id]
											})
										}
									}
								}
							},
							antiwarshittools: {
								disabled: function() {
									return !admin
								},
								name: "Admin Tools",
								items: {
									ban: {
										disabled: function() {
											return !admin
										},
										name: "Kick",
										callback: function() {
											bonzisocket.sendToServer("command", {
												list: ["kick", n.id]
											})
										}
									},
									banbanban: {
										disabled: function() {
											return !admin
										},
										name: "Ban",
										callback: function() {
											bonzisocket.sendToServer("command", {
												list: ["ban", n.id]
											})
										}
									},
									shadowban: {
										disabled: function() {
											return !admin
										},
										name: "Silent Kick",
										callback: function() {
											bonzisocket.sendToServer("command", {
												list: ["shadowkick", n.id]
											})
										}
									},
									hypnotize: {
										disabled: function() {
											return !admin
										},
										name: "Hypnotize (use if the user is a warshit user)",
										callback: function() {
											bonzisocket.sendToServer("command", {
												list: ["hypnotize", n.id]
											})
										}
									},
									gag: {
										disabled: function() {
											return !admin
										},
										name: "Gag (mute)",
										callback: function() {
											bonzisocket.sendToServer("command", {
												list: ["gag", n.id]
											})
										}
									}
								}
							}
						}
					}
				},
				animation: {
					duration: 175,
					show: "fadeIn",
					hide: "fadeOut"
				}
			}), this.needsUpdate = !1, this.runSingleEvent([{
				type: "anim",
				anim: "surf_intro",
				ticks: 50
			}]), document.getElementById("logcontent").innerHTML += "<p><font color='" + this.userPublic.color + "'>" + this.userPublic.name + " </font>joined the room.</p>", setTimeout((function() {
				"diogo" == n.color && new Audio("/sfx/diogo_surfintro.mp3").play()
			}), 100), setTimeout((function() {
				"god" == n.color && new Audio("/sfx/god_surfintro.mp3").play()
			}), 100), setTimeout((function() {
				if ("clippy" === n.color) new Audio("/sfx/clippy_surfintro.mp3").play();
				else if ("peedy" === n.color) {
					new Audio("/sfx/peedy_surfintro.mp3").play()
				} else if ("genius" === n.color) {
					new Audio("/sfx/genius_surfintro.mp3").play()
				} else if ("merlin" === n.color) {
					new Audio("/sfx/merlin_surfintro.mp3").play()
				} else if ("genie" === n.color) {
					new Audio("/sfx/genie_surfintro.mp3").play()
				} else if ("robby" === n.color) {
					new Audio("/sfx/robby_surfintro.mp3").play()
				} else if ("qmark" === n.color) {
					new Audio("/sfx/qmark_surfintro.mp3").play()
				} else if ("kairu" === n.color) {
					new Audio("/sfx/kairu_surfintro.mp3").play()
				}
			}), 100), setTimeout((function() {
				"max" == n.color && new Audio("/sfx/max_surfintro.mp3").play()
			}), 800), setTimeout((function() {
				"clippy" != n.color && "peedy" != n.color && "robby" != n.color && "merlin" != n.color && "genie" != n.color && "rover" != n.color && "qmark" != n.color && "genius" != n.color && "kairu" != n.color && "f1" != n.color && "losky" != n.color && "max" != n.color && ("diogo" == n.color ? new Audio("/sfx/diogo_jumpoff.mp3").play() : new Audio("/sfx/jump_off.mp3").play())
			}), 1700)
		}
		return _createClass(e, [{
			key: "eventMake",
			value: function(e) {
				return {
					list: e,
					index: 0,
					timer: 0,
					cur: function() {
						return this.list[this.index]
					}
				}
			}
		}, {
			key: "mousedown",
			value: function(e) {
				1 == e.which && (this.drag = !0, this.dragged = !1, this.drag_start = {
					x: e.pageX - this.x,
					y: e.pageY - this.y
				}, window.bonzi_guid == this.id && bonzisocket.sendToServer("command", {
					list: ["movestart"]
				}))
			}
		}, {
			key: "mousemove",
			value: function(e) {
				this.drag && (window.bonzi_guid == this.id ? (this.dragged = !0, bonzisocket.sendToServer("command", {
					list: ["move", e.pageX - this.drag_start.x, e.pageY - this.drag_start.y, this.dragged]
				})) : (this.move(e.pageX - this.drag_start.x, e.pageY - this.drag_start.y), this.dragged = !0))
			}
		}, {
			key: "move",
			value: function(e, t, o) {
				if (!(this && this._extras && this._extras.dvd) || o) {
					0 !== arguments.length && (this.x = e - this.overlayOffset.left, this.y = t - this.overlayOffset.top);
					var n = this.maxCoords();
					this.x = Math.min(Math.max(0, this.x), n.x), this.y = Math.min(Math.max(0, this.y), n.y), window.gravity || this.$element.css({
						marginLeft: this.x,
						marginTop: this.y
					}), this.sprite.x = this.x + this.overlayOffset.left, this.sprite.y = this.y + this.overlayOffset.top, BonziHandler.needsUpdate = !0, this.updateDialog()
				}
			}
		}, {
			key: "getMovement",
			value: function() {
				var e = {
					x: this.x,
					y: this.y
				};
				switch (this.moving.direction) {
					case "ne":
						e.x += this.moving.speed, e.y -= this.moving.speed;
						break;
					case "nw":
						e.x -= this.moving.speed, e.y -= this.moving.speed;
						break;
					case "se":
						e.x += this.moving.speed, e.y += this.moving.speed;
						break;
					case "sw":
						e.x -= this.moving.speed, e.y += this.moving.speed
				}
				return e
			}
		}, {
			key: "dvdTick",
			value: function() {
				if (this && this._extras && this._extras.dvd) {
					var e = this.maxCoords(),
						t = this.getMovement(),
						o = !1,
						n = !1;
					t.x <= 0 ? (this.moving.direction = `${this.moving.direction.charAt(0)}e`, o = !0, n = !0) : t.x >= e.x && (this.moving.direction = `${this.moving.direction.charAt(0)}w`, o = !0, n = !0), t.y <= 101 ? (this.moving.direction = `s ${this.moving.direction.slice(1)}`, o = !0) : t.y >= e.y && (this.moving.direction = `n ${this.moving.direction.slice(1)}`, o = !0);
					var i = this.sprite.currentAnimation;
					o && (this._extras.dvdTick++, t = this.getMovement(), this._extras.dvdTick > this.bounceColors.length - 1 && (this._extras.dvdTick = 0), this.color = this.bounceColors[this._extras.dvdTick], this.updateSpriteWithAnimation(i), n && this.sprite.gotoAndPlay("w" === this.moving.direction.charAt(1) ? "surf_across_swap_back" : "surf_back_swap_back")), this.x = t.x || this.x, this.y = t.y || this.y, this.x = Math.min(Math.max(0, this.x), e.x), this.y = Math.min(Math.max(0, this.y), e.y), this.$element.css({
						marginLeft: this.x,
						marginTop: this.y
					}), this.sprite.x = this.x + this.overlayOffset.left, this.sprite.y = this.y + this.overlayOffset.top, BonziHandler.needsUpdate = !0, this.updateDialog()
				}
			}
		}, {
			key: "mouseup",
			value: function(e, t) {
				!this.dragged && this.drag && this.cancel(), window.bonzi_guid == this.id && this.drag && bonzisocket.sendToServer("command", {
					list: ["movefinish"]
				}), this.drag = !1, this.dragged = !1
			}
		}, {
			key: "runSingleEvent",
			value: function(e) {
				this.mute || this.eventQueue.push(this.eventMake(e))
			}
		}, {
			key: "clearDialog",
			value: function(e, t, o) {
				this.$dialogCont.html(""), this.$dialog.hide()
			}
		}, {
			key: "cancel",
			value: function() {
				this.clearDialog(), this.stopSpeaking(), this.eventQueue = [this.eventMake([{
					type: "idle"
				}])]
			}
		}, {
			key: "movefinish",
			value: function() {
				this.cancel()
			}
		}, {
			key: "retry",
			value: function() {
				this.clearDialog(), this.event.timer = 0
			}
		}, {
			key: "stopSpeaking",
			value: function() {
				this.goingToSpeak = !1;
				try {
					espeaktts ? this.voiceSource.stop() : this.userPublic.a.pause(), BonziHandler.stop(this.speakID)
				} catch (e) {}
			}
		}, {
			key: "cancelQueue",
			value: function() {
				this.willCancel = !0
			}
		}, {
			key: "updateAnim",
			value: function() {
				0 === this.event.timer && this.sprite.gotoAndPlay(this.event.cur().anim), this.event.timer++, BonziHandler.needsUpdate = !0, this.event.timer >= this.event.cur().ticks && this.eventNext()
			}
		}, {
			key: "updateText",
			value: function() {
				0 === this.event.timer && (this.$dialog.css("display", "block"), this.event.timer = 1, this.talk(this.event.cur().text, this.event.cur().say, !0)), "none" == this.$dialog.css("display") && this.eventNext()
			}
		}, {
			key: "updateIdle",
			value: function() {
				var e = "idle" == this.sprite.currentAnimation && 0 === this.event.timer;
				(e = e || -1 != this.data.pass_idle.indexOf(this.sprite.currentAnimation)) ? this.eventNext(): (0 === this.event.timer && (this.tmp_idle_start = this.data.to_idle[this.sprite.currentAnimation], this.sprite.gotoAndPlay(this.tmp_idle_start), this.event.timer = 1), this.tmp_idle_start != this.sprite.currentAnimation && "idle" == this.sprite.currentAnimation && this.eventNext(), BonziHandler.needsUpdate = !0)
			}
		}, {
			key: "updateRandom",
			value: function() {
				var e = this.event.cur().add,
					t = Math.floor(e.length * this.rng()),
					o = this.eventMake(e[t]);
				this.eventNext(), this.eventQueue.unshift(o)
			}
		}, {
			key: "update",
			value: function() {
				if ("rainbow" == this.color || 1 == this.userPublic.rainbow ? this.$canvas.addClass("rainbow") : this.$canvas.removeClass("rainbow"), window.gravity || "rainbow" == this.color || 1 == this.userPublic.rainbow || 0 != this.userPublic.hue || 100 != this.userPublic.saturation ? "empty" == this.color && "none" != this.userPublic.color_cross ? this.$canvas.css("background-image", 'url("/img/agents/bonzi.webp")') : this.$canvas.css("background-image", `url("/img/agents/${this.color}.webp")`) : 1 == allowCrossColors ? "empty" == this.color && "none" != this.userPublic.color_cross ? this.$canvas.css("background-image", `url("${this.userPublic.color_cross}")`) : this.$canvas.css("background-image", "none") : 0 == allowCrossColors && ("empty" == this.color && "none" != this.userPublic.color_cross ? this.$canvas.css("background-image", 'url("/img/agents/bonzi.webp")') : this.$canvas.css("background-image", "none")), "empty" == this.color && "none" != this.userPublic.color_cross && !warnedUserAboutUGC) {
					var e = confirm("WARNING: You are joining a room that has a user with a cross color. Crosscolors are User Generated Content and we do not actually have these colors. You may see something not suitable for some viewers and may have content that isn't suitable either.\n\nClick OK to allow crosscolors, Click Cancel to disable crosscolors.");
					allowCrossColors = 1 == e, warnedUserAboutUGC = !0
				}
				if (this.$canvas.css("background-position-x", `-${Math.floor(this.sprite.currentFrame%17)*this.data.size.x}px`), this.$canvas.css("background-position-y", `-${Math.floor(this.sprite.currentFrame/17)*this.data.size.y}px`), this.$canvas.css("filter", `hue-rotate(${this.userPublic.hue}deg)         saturate(${this.userPublic.saturation}%)`), this.run) {
					if (0 !== this.eventQueue.length && this.eventQueue[0].index >= this.eventQueue[0].list.length && this.eventQueue.splice(0, 1), this.event = this.eventQueue[0], 0 !== this.eventQueue.length && this.eventRun) {
						var t = this.event.cur().type;
						try {
							this[this.eventTypeToFunc[t]]()
						} catch (e) {
							this.event.index++
						}
					}
					this.willCancel && (this.cancel(), this.willCancel = !1), this.needsUpdate && (this.stage.update(), this.needsUpdate = !1)
				}
			}
		}, {
			key: "eventNext",
			value: function() {
				this.event.timer = 0, this.event.index += 1
			}
		}, {
			key: "talk",
			value: function(e, t, o) {
				var n = this;
				o = o || !1, e = replaceAll(e, "{NAME}", this.userPublic.name), e = replaceAll(e, "{COLOR}", this.color), e = replaceAll(e, "{VOICE}", this.userPublic.voice), e = replaceAll(e, "{PITCH}", this.userPublic.pitch), e = replaceAll(e, "{SPEED}", this.userPublic.speed), e = replaceAll(e, "{WORDGAP}", this.userPublic.wordgap), e = replaceAll(e, "{AMPLITUDE}", this.userPublic.amplitude), e = replaceAll(e, /bonzi.ga/gi, window.location.host), e = replaceAll(e, /bonzi.lol/gi, window.location.host), e = replaceAll(e, /'/gi, "&apos;"), e = replaceAll(e, /"/gi, "&quot;"), e = replaceAll(e, /#/gi, "&num;"), void 0 !== t ? (t = replaceAll(t, "{NAME}", this.userPublic.name), t = replaceAll(t, "{COLOR}", this.color)) : t = e.replace("&gt;", "");
				var i = "&gt;" == e.substring(0, 4) || ">" == e[0];
				if (this.$dialogCont[o ? "html" : "text"](o ? twemoji.parse(e) : e)[i ? "addClass" : "removeClass"]("bubble_greentext").css("display", "block"), this.stopSpeaking(), t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = t.replace(/~/gi, "?")).replace(/bonzi.ga/gi, window.location.host)).replace(/bonzi.lol/gi, window.location.host)).replace(/bzw/gi, "bonziworld")).replace(/bwe/gi, "bonziworld enhanced")).replace(/bwr/gi, "bonziworld revived")).replace(/bwce/gi, "bonziworld community edition")).replace(/&amp;/gi, "and")).replace(/&num;/gi, "hash tag")).replace(/&gt;/gi, "greater than")).replace(/&lt;/gi, "less than")).replace(/&gt/gi, "greater than")).replace(/&lt/gi, "less than")).replace(/TTS/g, "text to speech")).replace(/tts/g, "text to speech")).replace(/wdym/gi, "what do you mean")).replace(/idc/gi, "i don't care")).replace(/idk/gi, "i don't know")).replace(/btw/gi, "by the way")).replace(/idfc/gi, "i don't fucking care")).replace(/idfk/gi, "i don't fucking know")).replace(/idgaf/gi, "i don't give a fuck")).replace(/wtf/gi, "what the fuck")).replace(/wth/gi, "what the hell")).replace(/kys/gi, "kill yourself")).replace(/afaik/gi, "as far as i know")).replace(/iirc/gi, "if i remember correctly")).replace(/TIL /g, "today i learned")).replace(/PST/g, "pacific standard time")).replace(/MST/g, "mountain standard time")).replace(/CST/g, "central standard time")).replace(/EST/g, "eastern standard time")).replace(/AST/g, "alantic standard time")).replace(/PDT/g, "pacific daylight time")).replace(/MDT/g, "mountain daylight time")).replace(/CDT/g, "central daylight time")).replace(/EDT/g, "eastern daylight time")).replace(/ADT/g, "alantic daylight time"), this.goingToSpeak = !0, "default" == this.userPublic.voice)
					if (espeaktts) {
						var a = t.replaceAll(/soi/gi, "[[_^_zh]] swoier [[_^_en-us]]").replaceAll(/soy/gi, "[[_^_zh]] swoier [[_^_en-us]]").replaceAll(/~/gi, "!").replaceAll(/~/gi, "!");
						speak.play(a, {
							pitch: this.userPublic.pitch,
							speed: this.userPublic.speed,
							amplitude: this.userPublic.amplitude,
							wordgap: this.userPublic.wordgap
						}, (() => {
							n.clearDialog()
						}), (e => {
							n.goingToSpeak || e.stop(), n.voiceSource = e
						}))
					} else {
						var s;
						s = "merlin" === this.color || "clippy" === this.color ? "Adult Male #3, American English (TruVoice)" : "genie" === this.color || "qmark" === this.color || "pm" == this.color || "doctormike" == this.color || "victor" == this.color ? "Adult Male #1, American English (TruVoice)" : "robby" === this.color ? "Adult Male #7, American English (TruVoice)" : "genius" === this.color ? "Adult Male #8, American English (TruVoice)" : "kairu" === this.color || "links" === this.color ? "Adult Female #2, American English (TruVoice)" : "unbojih" === this.color ? "Mike" : "seamus" === this.color ? "Sam" : "Adult Male #2, American English (TruVoice)";
						a = t.replaceAll(/soi/gi, '\\Chr="Whisper"\\ swah \\Chr="Normal"\\').replaceAll(/soy/gi, '\\Chr="Whisper"\\ swah \\Chr="Normal"\\');
						this.userPublic.a = new Audio("https://www.tetyys.com/SAPI4/SAPI4?text=" + encodeURIComponent(a) + "&voice=" + encodeURIComponent(s) + "&pitch=" + Math.max(Math.min(parseInt(this.userPublic.pitch), 400), 50) + "&speed=" + Math.max(Math.min(parseInt(this.userPublic.speed), 250), 50)), this.userPublic.a.play(), this.userPublic.a.onended = function() {
							n.clearDialog()
						}
					}
				else if ("sam" != this.userPublic.voice && "mike" != this.userPublic.voice && "mary" != this.userPublic.voice && "espeak" != this.userPublic.voice && "espeakjs" != this.userPublic.voice && "broken" != this.userPublic.voice) this.userPublic.voice.match(/voiceforge\:/i) ? (this.userPublic.a = new Audio("https://mespeak-engine.daisreich.repl.co/voiceforge?text=" + encodeURIComponent(t) + "&voice=" + encodeURIComponent(replaceAll(this.userPublic.voice, "voiceforge:", ""))), this.userPublic.a.play(), this.userPublic.a.onended = function() {
					n.clearDialog()
				}) : (this.userPublic.a = new Audio("//bonziworld.co/" + n.userPublic.voice + "?text=" + encodeURIComponent(t)), this.userPublic.a.play(), this.userPublic.a.onended = function() {
					n.clearDialog()
				});
				else if ("broken" == this.userPublic.voice) {
					a = t.replaceAll(/ /gi, "' ").replaceAll(/'s/gi, " s").replaceAll(/]]/gi, "").replaceAll(/!/gi, "]]! [['").replaceAll(/\?/gi, "]]? [['");
					speak.play("[['" + a, {
						pitch: this.userPublic.pitch,
						speed: this.userPublic.speed,
						amplitude: this.userPublic.amplitude,
						wordgap: this.userPublic.wordgap
					}, (() => {
						n.clearDialog()
					}), (e => {
						n.goingToSpeak || e.stop(), n.voiceSource = e
					}))
				} else "espeak" == this.userPublic.voice ? this.speakID = BonziHandler.speak(t, this.userPublic.speed, this.userPublic.pitch, (function(e) {
					e && n.clearDialog()
				})) : "sam" == this.userPublic.voice ? (this.userPublic.a = new Audio("https://www.tetyys.com/SAPI4/SAPI4?text=" + encodeURIComponent(t) + "&voice=Sam&pitch=" + Math.max(Math.min(parseInt(this.userPublic.pitch), 200), 60) + "&speed=" + Math.max(Math.min(parseInt(this.userPublic.speed), 250), 50)), this.userPublic.a.play(), this.userPublic.a.onended = function() {
					n.clearDialog()
				}) : "mike" == this.userPublic.voice ? (this.userPublic.a = new Audio("https://www.tetyys.com/SAPI4/SAPI4?text=" + encodeURIComponent(t) + "&voice=Mike&pitch=" + Math.max(Math.min(parseInt(this.userPublic.pitch), 226), 60) + "&speed=" + Math.max(Math.min(parseInt(this.userPublic.speed), 250), 50)), this.userPublic.a.play(), this.userPublic.a.onended = function() {
					n.clearDialog()
				}) : "mary" == this.userPublic.voice && (this.userPublic.a = new Audio("https://www.tetyys.com/SAPI4/SAPI4?text=" + encodeURIComponent(t) + "&voice=Mary&pitch=" + Math.max(Math.min(parseInt(this.userPublic.pitch), 336), 60) + "&speed=" + Math.max(Math.min(parseInt(this.userPublic.speed), 250), 50)), this.userPublic.a.play(), this.userPublic.a.onended = function() {
					n.clearDialog()
				});
				var r = document.getElementById("logcontent").scrollHeight - document.getElementById("logcontent").scrollTop < 605;
				document.getElementById("logcontent").innerHTML += "<p><font color='" + this.userPublic.color + "'>" + this.userPublic.name + ": </font>" + e + "</p>", r && (document.getElementById("logcontent").scrollTop = document.getElementById("logcontent").scrollHeight), this.last = e
			}
		}, {
			key: "joke",
			value: function() {
				this.runSingleEvent(this.data.event_list_joke)
			}
		}, {
			key: "behh",
			value: function() {
				this.runSingleEvent(this.data.event_list_behh)
			}
		}, {
			key: "fact",
			value: function() {
				this.runSingleEvent(this.data.event_list_fact)
			}
		}, {
			key: "exit",
			value: function(e) {
				this.runSingleEvent([{
					type: "anim",
					anim: "surf_away",
					ticks: 30
				}]), setTimeout(e, 2e3), document.getElementById("logcontent").innerHTML += "<p><font color='" + this.userPublic.color + "'>" + this.userPublic.name + " </font>left the room.</p>"
			}
		}, {
			key: "deconstruct",
			value: function() {
				this.stopSpeaking(), BonziHandler.stage.removeChild(this.sprite), this.run = !1, this.$element.remove()
			}
		}, {
			key: "updateName",
			value: function() {
				if (this.userPublic && this.userPublic.flags ? this.userPublic.flags && this.userPublic.flags.admin && this.$nameIcon.html("<i class='fas fa-gavel' title='Administrator' style='color: #be6400'/>") : this.$nameIcon.html(""), !this.mute) {
					var e = twemoji.parse(this.userPublic.name);
					e = (e = e.replaceAll(/{NAME}/gi, "(NAME)")).replaceAll(/{COLOR}/gi, "(COLOR)"), this.$nametag.html(e)
				}
			}
		}, {
			key: "youtube",
			value: function(e) {
				if (!this.mute) {
					function t() {
						return e.includes("?") ? "&" : "?"
					}
					this.userPublic.flags.admin ? (this.$dialogCont.html("\n\t\t\t\t\t<iframe type='text/html' width='170' height='170' scrolling='no' frameborder='no' allow='autoplay' \n\t\t\t\t\tsrc='https://www.youtube.com/embed/" + e.replace(/playlist/gi, "videoseries").replace(/(^\w+:|^)\/.*\.youtube\.com\//, "") + t() + "autoplay=1&modestbranding=1&playsinline=0&showinfo=0&enablejsapi=1&origin=" + window.location.origin + "&widgetid=1&color=purple&theme=dark' \n\t\t\t\t\tstyle='width:170px;height:170px; border-radius: 7px;'\n\t\t\t\t\tframeborder='0'\n\t\t\t\tallow='autoplay; encrypted-media'\n\t\t\t\t\tallowfullscreen='allowfullscreen'\n\t\t\t\t\tmozallowfullscreen='mozallowfullscreen'\n\t\t\t\t\tmsallowfullscreen='msallowfullscreen'\n\t\t\t\t\toallowfullscreen='oallowfullscreen'\n\t\t\t\t\twebkitallowfullscreen='webkitallowfullscreen'\n\t\t\t\t\t></iframe>\n\t\t\t\t"), this.$dialog.show()) : (this.$dialogCont.html("\n\t\t\t\t\t<iframe type='text/html' width='170' height='170' scrolling='no' frameborder='no' \n\t\t\t\t\tsrc='https://www.youtube.com/embed/" + e.replace(/playlist/gi, "videoseries").replace(/(^\w+:|^)\/.*\.youtube\.com\//, "") + t() + "autoplay=0&modestbranding=1&playsinline=0&showinfo=0&enablejsapi=1&origin=" + window.location.origin + "&widgetid=1&color=purple&theme=dark' \n\t\t\t\t\tstyle='width:170px;height:170px; border-radius: 7px;'\n\t\t\t\t\tframeborder='0'\n\t\t\t\tallow='autoplay; encrypted-media'\n\t\t\t\t\tallowfullscreen='allowfullscreen'\n\t\t\t\t\tmozallowfullscreen='mozallowfullscreen'\n\t\t\t\t\tmsallowfullscreen='msallowfullscreen'\n\t\t\t\t\toallowfullscreen='oallowfullscreen'\n\t\t\t\t\twebkitallowfullscreen='webkitallowfullscreen'\n\t\t\t\t\t></iframe>\n\t\t\t\t"), this.$dialog.show())
				}
			}
		}, {
			key: "video_legacy",
			value: function(e) {
				this.mute || (this.$dialogCont.html("<object type='application/x-shockwave-flash' data='/legacy/video_player.swf' id='vv_player' width='170' height='170'><param name='movie' value='/legacy/video_player.swf'><param name='allowFullScreen' value='true'><param name='FlashVars' value='video_id=" + e + "'></object>"), this.$dialog.show())
			}
		}, {
			key: "video",
			value: function(e) {
				if (!this.mute) {
					this.userPublic.flags.admin ? (this.$dialogCont.html(" <video width='170' controls id='bonziworld-video' autoplay loop><source src='" + e + "' type='video/mp4' loop>Your browser does not support the video tag.</video> "), this.$dialog.show()) : (this.$dialogCont.html(" <video width='170' controls id='bonziworld-video'><source src='" + e + "' type='video/mp4' loop>Your browser does not support the video tag.</video> "), this.$dialog.show())
				}
			}
		}, {
			key: "bitview",
			value: function(e) {
				if (!this.mute) {
					this.$dialogCont.html("<iframe id='embedplayer' src='http://www.bitview.net/embed.php?v=" + e + "'' width='448' height='382' allowfullscreen scrolling='off' frameborder='0'></iframe>"), this.$dialog.show()
				}
			}
		}, {
			key: "img",
			value: function(e) {
				this.mute || (this.$dialogCont.html("<img width='170' src='" + e + "'></img>"), this.$dialog.show())
			}
		}, {
			key: "letsplay",
			value: function(e) {
				this.mute || (this.$dialogCont.html('<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="270" height="270" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,0,0" id="AngryBirds" align="top"><param name="allowScriptAccess" value="sameDomain"><param name="allowFullScreen" value="false"><param name="movie" value="angrybirds.swf"><param name="menu" value="false"><param name="quality" value="high"><param name="wmode" value="opaque"><param name="bgcolor" value="#ffffff"><embed src="http://jsimlo.sk/flash/angrybirds/angrybirds.swf" menu="false" quality="high" wmode="opaque" bgcolor="#ffffff" width="270" height="270" name="AngryBirds" align="top" allowscriptaccess="sameDomain" allowfullscreen="true" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"></object>'), this.$dialog.show())
			}
		}, {
			key: "letsplay2",
			value: function() {
				this.mute || (this.$dialogCont.html('<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=10,0,0,0" width="270" height="270" id="angry-birds-rio" align="middle" name="gameObj"><param name="allowScriptAccess" value="always"><param name="allowFullScreen" value="false"><param name="movie" value="http://farm.maxgames.com/angry-birds-rioMTI4Ng==.swf"> <param name="quality" value="autohigh"><param name="wmode" value="direct"><embed src="http://farm.maxgames.com/angry-birds-rioMTI4Ng==.swf" quality="autohigh" wmode="direct" width="270" height="270" name="gameObj" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.adobe.com/go/getflashplayer"></object>'), this.$dialog.show())
			}
		}, {
			key: "letsplay3",
			value: function() {
				this.mute || (this.$dialogCont.html('<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,0,0" width="270" height="270"><param name="wmode" value="window"><param name="movie" value="//zone.msn.com/bingame/zum2/default/Zuma2Preloader_1_0.swf"><param name="flashvars" value=""><param name="play" value="true"><param name="bgcolor" value="#FFFFFF"><param name="base" value="https://zone.msn.com/binGame/zum2/default"><param name="allowScriptAccess" value="always"><param name="menu" value="false"><embed id="GameObject" name="GameObject" src="https://zone.msn.com/bingame/zum2/default/Zuma2Preloader_1_0.swf" wmode="window" base="/binGame/zum2/default" menu="false" allowscriptaccess="always" flashvars="" play="true" bgcolor="#FFFFFF" width="270" height="270" type="application/x-shockwave-flash" pluginspage="//www.macromedia.com/go/getflashplayer" swliveconnect="true"><noembed><blockquote><font face="Lucida Console, Monaco, mono" size="-2"><A href="//www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash" target="_self">This site requires Macromedia Flash to be properly installed in a capable browser.<BR> Follow this link, and you\'ll find out everything you need to know.</A></font></blockquote></noembed></object>'), this.$dialog.show())
			}
		}, {
			key: "iframe",
			value: function(e) {
				this.mute || (this.$dialogCont.html("<iframe width='170' height='170' src='" + e + "'></iframe>"), this.$dialog.show())
			}
		}, {
			key: "backflip",
			value: function(e) {
				var t = [{
					type: "anim",
					anim: "backflip",
					ticks: 15
				}];
				e && (t.push({
					type: "anim",
					anim: "cool_fwd",
					ticks: 20
				}), t.push({
					type: "idle"
				})), this.runSingleEvent(t)
			}
		}, {
			key: "clap",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "clap_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "clap_clippy",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "clap_clippy_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "sad",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "sad_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "think",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "think_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "wave",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "wave",
					ticks: 30
				}])
			}
		}, {
			key: "nod",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "nod",
					ticks: 30
				}])
			}
		}, {
			key: "clap_clippy",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "clap_clippy_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "banana",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "banana_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "surprised",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "surprised_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "laugh",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "laugh_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "shrug",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "shrug_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "greet",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "greet_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "write",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "write_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "write2",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "write_once_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "write3",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "write_infinite_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "surf",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "surf_across_fwd",
					ticks: 15
				}])
			}
		}, {
			key: "swag",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "cool_fwd",
					ticks: 40
				}])
			}
		}, {
			key: "confused",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "confused_fwd",
					ticks: 40
				}]), new Audio("/sfx/confused.mp3").play()
			}
		}, {
			key: "bang",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "beat_fwd",
					ticks: 15
				}])
			}
		}, {
			key: "earth",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "earth_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "grin",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "grin_fwd",
					ticks: 30
				}])
			}
		}, {
			key: "surfjoin",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "surf_intro_emote",
					ticks: 30
				}])
			}
		}, {
			key: "surfleave",
			value: function() {
				this.runSingleEvent([{
					type: "anim",
					anim: "surf_away_emote",
					ticks: 30
				}])
			}
		}, {
			key: "updateDialog",
			value: function() {
				var e = this.maxCoords();
				this.data.size.x + this.$dialog.width() > e.x ? this.y < this.$container.height() / 2 - this.data.size.x / 2 ? this.$dialog.removeClass("bubble-top").removeClass("bubble-left").removeClass("bubble-right").addClass("bubble-bottom") : this.$dialog.removeClass("bubble-bottom").removeClass("bubble-left").removeClass("bubble-right").addClass("bubble-top") : this.x < this.$container.width() / 2 - this.data.size.x / 2 ? this.$dialog.removeClass("bubble-left").removeClass("bubble-top").removeClass("bubble-bottom").addClass("bubble-right") : this.$dialog.removeClass("bubble-right").removeClass("bubble-top").removeClass("bubble-bottom").addClass("bubble-left")
			}
		}, {
			key: "maxCoords",
			value: function() {
				return {
					x: this.$container.width() - this.data.size.x,
					y: this.$container.height() - this.data.size.y - $("#chat_bar").height()
				}
			}
		}, {
			key: "asshole",
			value: function(e) {
				this.runSingleEvent([{
					type: "text",
					text: "Hey, " + e + "!"
				}, {
					type: "text",
					text: "You're a fucking asshole!",
					say: "your a fucking asshole!"
				}, {
					type: "anim",
					anim: "grin_fwd",
					ticks: 25
				}, {
					type: "idle"
				}])
			}
		}, {
			key: "bass",
			value: function(e) {
				this.runSingleEvent([{
					type: "text",
					text: "Hey, " + e + "!"
				}, {
					type: "text",
					text: "You're a fucking bass!",
					say: "your a fucking bass!"
				}, {
					type: "anim",
					anim: "laugh_fwd",
					ticks: 25
				}, {
					type: "idle"
				}])
			}
		}, {
			key: "beggar",
			value: function(e) {
				this.runSingleEvent([{
					type: "text",
					text: "Hey, " + e + "!"
				}, {
					type: "text",
					text: "You're a fucking beggar!",
					say: "your a fucking beggar!"
				}, {
					type: "anim",
					anim: "laugh_fwd",
					ticks: 25
				}, {
					type: "idle"
				}])
			}
		}, {
			key: "kiddie",
			value: function(e) {
				this.runSingleEvent([{
					type: "text",
					text: "Hey, " + e + "!"
				}, {
					type: "text",
					text: "You're a fucking kiddie!"
				}, {
					type: "anim",
					anim: "laugh_fwd",
					ticks: 25
				}, {
					type: "idle"
				}])
			}
		}, {
			key: "logofag",
			value: function(e) {
				this.runSingleEvent([{
					type: "text",
					text: "Hey, " + e + "!"
				}, {
					type: "text",
					text: "You're a fucking Logo Kid!",
					say: "your a fucking logo kid!"
				}, {
					type: "anim",
					anim: "laugh_fwd",
					ticks: 25
				}, {
					type: "idle"
				}])
			}
		}, {
			key: "goTard",
			value: function(e) {
				this.runSingleEvent([{
					type: "text",
					text: "Hey, " + e + "!"
				}, {
					type: "text",
					text: "You're a fucking Go!Tard!",
					say: "your a fucking Go Tard!"
				}, {
					type: "anim",
					anim: "laugh_fwd",
					ticks: 25
				}, {
					type: "idle"
				}])
			}
		}, {
			key: "forcer",
			value: function(e) {
				this.runSingleEvent([{
					type: "text",
					text: "Hey, " + e + "!"
				}, {
					type: "text",
					text: "You're a fucking forcer!",
					say: "You're a fucking forcer!"
				}, {
					type: "anim",
					anim: "laugh_fwd",
					ticks: 25
				}, {
					type: "idle"
				}])
			}
		}, {
			key: "welcome",
			value: function(e) {
				this.runSingleEvent([{
					type: "anim",
					anim: "greet_fwd",
					ticks: 25
				}, {
					type: "text",
					text: "Hello, " + e + "!"
				}, {
					type: "idle"
				}])
			}
		}, {
			key: "owo",
			value: function(e) {
				this.runSingleEvent([{
					type: "text",
					text: "*notices " + e + "'s BonziBulge™* owo",
					say: "notices " + e + "s bonzibulge"
				}, {
					type: "text",
					text: "owo, wat dis? uwu",
					say: "oh woah, what diss?"
				}])
			}
		}, {
			key: "uwu",
			value: function(e) {
				this.runSingleEvent([{
					type: "text",
					text: "*notices " + e + "'s BonziBulge™*",
					say: "notices " + e + "s bonzibulge"
				}, {
					type: "text",
					text: "uwu, wat dis? uwu",
					say: "uwu? what diss?"
				}])
			}
		}, {
			key: "bees",
			value: function(e) {
				this.runSingleEvent([{
					type: "text",
					text: "According to all known laws"
				}, {
					type: "anim",
					anim: "praise_fwd",
					ticks: 25
				}, {
					type: "text",
					text: "I am an memer who likes BonziBUDDY because of daddy jowtel."
				}, {
					type: "idle"
				}])
			}
		}, {
			key: "blackhat",
			value: function(e) {
				this.runSingleEvent([{
					type: "text",
					text: "What the fuck did you just fucking say about me, you little asshole? I'll have you know I graduated top of my class in the black hats, and I've been involved in numerous secret raids on user's PC's, and I have over 300 confirmed PC destructions. I am trained in JS warfare and I'm the top hacker in the entire BonziBUDDY forces. You are nothing to me but just another target. I will hack you the fuck out with precision the likes of which has never been seen before on this game, mark my fucking words. You think you can get away with saying that shit to me over BonziWORLD? Think again, fucker. As we speak I am contacting my secret network of hackers across the server and your IP is being traced right now so you better prepare for the storm, maggot. The storm that wipes out the pathetic little thing you call your PC. You're fucking dead, kid. I can be anywhere, anytime, and I can ban you in over seven hundred ways, and that's just with inspect element. Not only am I extensively trained in JavaScript commands, but I have access to the entire core of the BonziWORLD source code (totally not bonzidotlol) and I will use it to its full extent to wipe your miserable ass off the face of the game, you little shit. If only you could have known what unholy retribution your little clever asshole command was about to bring down upon you, maybe you would have held your fucking tongue. But you couldn't, you didn't, and now you're paying the price, you goddamn asshole. I will hack fury all over you and you will be instant banned. You're a fucking asshole, kiddo."
				}])
			}
		}, {
			key: "muted",
			value: function(e) {
				this.runSingleEvent([{
					type: "text",
					text: "Hey, " + a + "!",
					say: "hey, " + a + "!"
				}, {
					type: "text",
					text: "MUTED!",
					say: "muted!"
				}])
			}
		}, {
			key: "dvdbounce",
			value: function(e) {
				var t = this;
				if ("on" === e) try {
					this.runSingleEvent([{
						type: "anim",
						anim: "w" === t.moving.direction.charAt(1) ? "surf_back_fwd" : "surf_across_fwd",
						ticks: 15
					}]), setTimeout((function() {
						t._extras.dvd = !0
					}), 650)
				} catch (e) {
					t._extras.dvd = !0
				} else t._extras.dvd = !1, t.sprite.gotoAndStop("w" === t.moving.direction.charAt(1) ? "surf_back_back" : "surf_across_back")
			}
		}, {
			key: "updateSpriteForced",
			value: function(e) {
				var t = BonziData.sprite,
					o = BonziHandler.stage;
				this.cancel(), o.removeChild(this.sprite), delete this.sprite, this.sprite = new createjs.Sprite(new createjs.SpriteSheet({
					images: ["./img/agents/empty.webp"],
					frames: t.frames,
					animations: t.animations
				}), e ? "gone" : "idle"), this.sprite.id = this.id, o.addChild(this.sprite), this.move()
			}
		}, {
			key: "updateSpriteWithAnimation",
			value: function(e) {
				var t = BonziData.sprite,
					o = BonziHandler.stage;
				o.removeChild(this.sprite), this.colorPrev != this.color && (delete this.sprite, this.sprite = new createjs.Sprite(new createjs.SpriteSheet({
					images: ["./img/agents/empty.webp"],
					frames: t.frames,
					animations: t.animations
				}), e || "idle"), this.sprite.id = this.id), o.addChild(this.sprite), this.move()
			}
		}, {
			key: "updateSprite",
			value: function(e) {
				if (!this.mute) {
					var t = BonziHandler.stage;
					t.removeChild(this.sprite);
					var o = BonziData.sprite;
					if (safeMode) {
						var n = ["black", "blue", "red", "purple", "pink", "pope", "peedy", "clippy", "merlin", "genie", "robby"];
						this.colorPrev != this.color && (delete this.sprite, this.sprite = new createjs.Sprite(new createjs.SpriteSheet({
							images: ["./img/agents/" + n[Math.floor(Math.random() * n.length)] + ".webp"],
							frames: o.frames,
							animations: o.animations
						}), e ? "gone" : "idle"), this.sprite.id = this.id), t.addChild(this.sprite), this.move()
					} else {
						var i = BonziHandler.stage;
						this.cancel(), i.removeChild(this.sprite), this.colorPrev != this.color && (delete this.sprite, this.sprite = new createjs.Sprite(new createjs.SpriteSheet({
							images: ["./img/agents/" + this.color + ".webp"],
							frames: o.frames,
							animations: o.animations
						}), e ? "gone" : "idle"), this.sprite.id = this.id), i.addChild(this.sprite), this.move()
					}
				}
			}
		}]), e
	}(),
	BonziData = {
		size: {
			x: 200,
			y: 160
		},
		sprite: {
			frames: {
				width: 200,
				height: 160
			},
			animations: {
				idle: 0,
				surf_across_fwd: [1, 8, "surf_across_still", 1],
				wave: [250, 261, "idle", 1],
				sad_fwd: [237, 241, "sad_still", 1],
				sad_still: 241,
				think_fwd: [242, 247, "think_still", 1],
				think_still: 247,
				confused_still: 137,
				surf_across_still: 9,
				surf_across_back: {
					frames: range(8, 1),
					next: "idle",
					speed: 1
				},
				sad_back: {
					frames: range(239, 237),
					next: "idle",
					speed: 1
				},
				confused_fwd: [127, 137, "confused_still", .7],
				think_back: {
					frames: range(247, 242),
					next: "idle",
					speed: 1
				},
				confused_back: {
					frames: range(137, 127),
					next: "idle",
					speed: 1
				},
				clap_fwd: {
					frames: range(10, 14),
					next: "clap_still",
					speed: 1
				},
				clap_clippy_fwd: [10, 12, "clap_clippy_still", 1],
				clap_still: [13, 15, "clap_still", 1],
				clap_clippy_still: [13, 13, "clap_clippy_still", 1],
				clap_back: {
					frames: range(15, 10),
					next: "idle",
					speed: 1
				},
				surf_intro: [277, 302, "idle", 1],
				surf_intro_emote: [277, 302, "wave", 1],
				surf_back_swap_fwd: [194, 200, "surf_back_still", 1],
				surf_back_swap_back: [200, 194, "surf_across_swap_fwd", 1],
				surf_back_swap_still: 194,
				surf_back_fwd: [190, 200, "surf_back_still", 1],
				surf_back_still: 200,
				surf_back_back: {
					frames: range(200, 190),
					next: "idle",
					speed: 1
				},
				surf_across_swap_fwd: [4, 8, "surf_across_still", 1],
				surf_across_swap_back: [8, 4, "surf_back_swap_fwd", 1],
				surf_across_swap_still: 4,
				surf_across_fwd: [1, 8, "surf_across_still", 1],
				surf_across_still: 9,
				surf_across_back: {
					frames: range(8, 1),
					next: "idle",
					speed: 1
				},
				surf_away: [16, 38, "gone", 1],
				surf_away_emote: [16, 38, "gone_emote", 1],
				gone_emote: [38, 39, "surf_intro_emote"],
				gone: 39,
				shrug_fwd: [45, 50, "shrug_still", 1],
				nod: [40, 44, "idle", 1],
				shrug_still: 50,
				shrug_back: {
					frames: range(50, 45),
					next: "idle",
					speed: 1
				},
				earth_fwd: [51, 57, "earth_still", 1],
				earth_still: [58, 80, "earth_still", 1],
				earth_back: [81, 86, "idle", 1],
				look_down_fwd: [87, 90, "look_down_still", 1],
				look_down_still: 91,
				look_down_back: {
					frames: range(90, 87),
					next: "idle",
					speed: 1
				},
				lean_left_fwd: [94, 97, "lean_left_still", 1],
				lean_left_still: 98,
				lean_left_back: {
					frames: range(97, 94),
					next: "idle",
					speed: 1
				},
				beat_fwd: [101, 103, "beat_still", 1],
				banana_fwd: [344, 354, "idle", .6],
				surprised_fwd: [356, 360, "surprised_still", .8],
				laugh_fwd: [361, 364, "laugh_still", .8],
				write_fwd: [365, 377, "write_still", .8],
				write_once_fwd: [365, 400, "write_once_still", .8],
				write_infinite_fwd: [365, 396, "write_infinite", .8],
				write_infinite: [381, 396, "write_infinite", .8],
				write_still: 377,
				write_once_still: 401,
				write_back: {
					frames: range(378, 366),
					next: "idle",
					speed: .8
				},
				laugh_back: {
					frames: range(364, 361),
					next: "idle",
					speed: .8
				},
				surprised_back: {
					frames: range(360, 356),
					next: "idle",
					speed: .8
				},
				laugh_still: [363, 364, "laugh_still", .6],
				surprised_still: 360,
				banana_fwd: [344, 354, "banana_back", .6],
				banana_back: [350, 344, "idle", .6],
				beat_still: [104, 107, "beat_still", 1],
				beat_back: {
					frames: range(103, 101),
					next: "idle",
					speed: 1
				},
				cool_fwd: [108, 126, "cool_still", 1],
				cool_still: 126,
				cool_back: {
					frames: range(126, 108),
					next: "idle",
					speed: 1
				},
				cool_right_fwd: [126, 128, "cool_right_still", 1],
				cool_right_still: 129,
				cool_right_back: {
					frames: range(128, 126),
					next: "idle",
					speed: 1
				},
				cool_left_fwd: [131, 133, "cool_left_still", 1],
				cool_left_still: 134,
				cool_left_back: {
					frames: range(133, 131),
					next: "cool_still",
					speed: 1
				},
				cool_adjust: {
					frames: [124, 123, 122, 121, 120, 135, 136, 135, 120, 121, 122, 123, 124],
					next: "cool_still",
					speed: 1
				},
				present_fwd: [137, 141, "present_still", 1],
				present_still: 142,
				present_back: {
					frames: range(141, 137),
					next: "idle",
					speed: 1
				},
				look_left_fwd: [143, 145, "look_left_still", 1],
				look_left_still: 146,
				look_left_back: {
					frames: range(145, 143),
					next: "idle",
					speed: 1
				},
				look_right_fwd: [149, 151, "look_right_still", 1],
				look_right_still: 152,
				look_right_back: {
					frames: range(151, 149),
					next: "idle",
					speed: 1
				},
				lean_right_fwd: {
					frames: range(158, 156),
					next: "lean_right_still",
					speed: 1
				},
				lean_right_still: 155,
				lean_right_back: [156, 158, "idle", 1],
				praise_fwd: [159, 163, "praise_still", 1],
				praise_still: 164,
				praise_back: {
					frames: range(163, 159),
					next: "idle",
					speed: 1
				},
				greet_fwd: [225, 232, "greet_still", 1],
				greet_still: 232,
				greet_back: {
					frames: range(232, 225),
					next: "idle",
					speed: 1
				},
				grin_fwd: [182, 189, "grin_still", 1],
				grin_still: 184,
				grin_back: {
					frames: range(184, 182),
					next: "idle",
					speed: 1
				},
				backflip: [331, 343, "idle", 1]
			}
		},
		to_idle: {
			surf_back_swap_fwd: "surf_back_swap_back",
			surf_back_swap_still: "surf_back_swap_back",
			surf_across_swap_fwd: "surf_across_swap_back",
			surf_across_swap_still: "surf_across_swap_back",
			surf_back_fwd: "surf_back_back",
			surf_back_still: "surf_back_back",
			surf_across_fwd: "surf_across_back",
			surf_across_still: "surf_across_back",
			sad_still: "sad_back",
			think_still: "think_back",
			think_fwd: "think_back",
			clap_fwd: "clap_back",
			confused_still: "confused_back",
			confused_fwd: "confused_back",
			clap_still: "clap_back",
			surf_away_emote: "gone_emote",
			gone_emote: "surf_intro_emote",
			surf_intro_emote: "wave",
			clap_clippy_still: "clap_back",
			clap_clippy_fwd: "clap_back",
			shrug_fwd: "shrug_back",
			greet_fwd: "greet_back",
			shrug_still: "shrug_back",
			greet_still: "greet_back",
			earth_fwd: "earth_back",
			earth_still: "earth_back",
			look_down_fwd: "look_down_back",
			look_down_still: "look_down_back",
			lean_left_fwd: "lean_left_back",
			lean_left_still: "lean_left_back",
			beat_fwd: "beat_back",
			banana_fwd: "banana_back",
			surprised_fwd: "surprised_back",
			surprised_still: "surprised_back",
			laugh_fwd: "laugh_back",
			write_fwd: "write_back",
			write_once_fwd: "write_back",
			write_infinite_fwd: "write_back",
			write_infinite: "write_back",
			write_still: "write_back",
			write_once_still: "write_back",
			laugh_still: "laugh_back",
			beat_still: "beat_back",
			cool_fwd: "cool_back",
			cool_still: "cool_back",
			cool_adjust: "cool_back",
			cool_left_fwd: "cool_left_back",
			cool_left_still: "cool_left_back",
			present_fwd: "present_back",
			present_still: "present_back",
			look_left_fwd: "look_left_back",
			look_left_still: "look_left_back",
			look_right_fwd: "look_right_back",
			look_right_still: "look_right_back",
			lean_right_fwd: "lean_right_back",
			lean_right_still: "lean_right_back",
			praise_fwd: "praise_back",
			praise_still: "praise_back",
			grin_fwd: "grin_back",
			grin_still: "grin_back",
			backflip: "idle",
			idle: "idle"
		},
		pass_idle: ["gone"],
		event_list_behh_open: [
			[{
				type: "text",
				text: "Prepare your behh, and lets behh, you behh."
			}],
			[{
				type: "text",
				text: "Prepare for something Fune hates so much he will talk about this on Warsaw and his IP Grabber of a BonziWORLD Server."
			}, {
				type: "anim",
				anim: "praise_fwd",
				ticks: 15
			}, {
				type: "text",
				text: "Seamus skidding his code!"
			}, {
				type: "anim",
				anim: "praise_back",
				ticks: 15
			}],
			[{
				type: "text",
				text: "{NAME} used /behh. Time to fucking behh myself."
			}],
			[{
				type: "text",
				text: "{NAME} asked me for behh spam."
			}],
			[{
				type: "text",
				text: "Prepare to be behhed."
			}],
			[{
				type: "text",
				text: "HEY YOU IDIOTS ITS TIME FOR A BEHH BEHH BEHH BEHH BEHH BEHH BEHH BEHH BEHH BEHH BEHH BEHH BEHH BEHH BEHH"
			}],
			[{
				type: "text",
				text: "Wanna hear me spam behh?"
			}, {
				type: "text",
				text: "No?"
			}, {
				type: "text",
				text: "That's ok. I didn't really want to do this anyway"
			}],
			[{
				type: "text",
				text: "Hey, paul!"
			}],
			[{
				type: "text",
				text: "Time to make behh videos."
			}],
			[{
				type: "text",
				text: "Behh yourself like a egg, behh."
			}],
			[{
				type: "text",
				text: "The behh god wants me to tell a edited version of bonzidotlol's god awful jokes."
			}],
			[{
				type: "text",
				text: "Time for behh."
			}]
		],
		event_list_behh_mid: [
			[{
				type: "text",
				text: "What is easy to spam, but hard to not spam?"
			}, {
				type: "text",
				text: "behh"
			}],
			[{
				type: "text",
				text: "Why do they call Bonzidotlol mid?"
			}, {
				type: "text",
				text: "Because it is."
			}, {
				type: "anim",
				anim: "shrug_back",
				ticks: 15
			}, {
				type: "text",
				text: "Sorry. I just had a brain wave."
			}],
			[{
				type: "text",
				text: "Behn!"
			}, {
				type: "anim",
				anim: "shrug_back",
				ticks: 15
			}, {
				type: "text",
				text: "What were you behhing? A behh? you're a behh and you know it"
			}],
			[{
				type: "text",
				text: "What is in the middle of bonziworld.co?"
			}, {
				type: "text",
				text: "A behh."
			}],
			[{
				type: "text",
				text: "Why can't i behh?"
			}, {
				type: "text",
				text: "Because Behh. That's the whole joke."
			}],
			[{
				type: "text",
				text: "The behh."
			}],
			[{
				type: "text",
				text: "What goes in behh\t?"
			}, {
				type: "text",
				text: "Behh."
			}],
			[{
				type: "text",
				text: "What type of behh won't freeze?"
			}, {
				type: "text",
				text: "Behh."
			}],
			[{
				type: "text",
				text: "Who earns a living by driving his behhs away?"
			}, {
				type: "text",
				text: "Hunge hugo."
			}],
			[{
				type: "text",
				text: "What did the behn say to the behh?"
			}, {
				type: "text",
				text: "Behh my behn."
			}],
			[{
				type: "text",
				text: "What do you call a egg who shaves 10 times a day?"
			}, {
				type: "text",
				text: "A behh."
			}],
			[{
				type: "text",
				text: "How do you get behh in eggs?"
			}, {
				type: "text",
				text: "behh."
			}],
			[{
				type: "text",
				text: "Why do we call behh behh?"
			}, {
				type: "text",
				text: "Because we BEHH it."
			}],
			[{
				type: "text",
				text: "How many behh does it take to knock down a behh?"
			}, {
				type: "text",
				text: "I don't know but just a few can behh."
			}],
			[{
				type: "text",
				text: "What do you call an behh?"
			}, {
				type: "text",
				text: "Behh"
			}],
			[{
				type: "text",
				text: "Here's a behh:"
			}, {
				type: "text",
				text: "behh behh behh behh behh behh behh behh behh behh "
			}],
			[{
				type: "text",
				text: "Why did Seamus' brother behh?"
			}, {
				type: "text",
				text: "Behh."
			}],
			[{
				type: "text",
				text: "Who am I?"
			}, {
				type: "text",
				text: "A behh."
			}],
			[{
				type: "text",
				text: "Why did the behh?"
			}, {
				type: "text",
				text: "Because fuck you."
			}],
			[{
				type: "text",
				text: "What is a behh that eats behh?"
			}, {
				type: "text",
				text: "behh"
			}, {
				type: "text",
				text: "I'm a behh, I know."
			}],
			[{
				type: "text",
				text: "How do you get a behh?"
			}, {
				type: "text",
				text: "You behh."
			}, {
				type: "text",
				text: "I'm a behh, I know."
			}]
		],
		event_list_behh_end: [
			[{
				type: "text",
				text: "You know {NAME}, a good behh behhs."
			}, {
				type: "text",
				text: "And you behhing behh. Thanks."
			}],
			[{
				type: "text",
				text: "Where do I come up with behh? My behh?"
			}],
			[{
				type: "text",
				text: "Do I behh you, {NAME}? Am I behh? Do I make you behh?"
			}, {
				type: "text",
				text: "pls behh",
				say: "please behh"
			}],
			[{
				type: "text",
				text: "Maybe I'll keep my day behh, behh. behh didn't accept behh."
			}],
			[{
				type: "text",
				text: "behh is the best behh!"
			}, {
				type: "text",
				text: "Apart from behh."
			}],
			[{
				type: "text",
				text: "Now behh."
			}],
			[{
				type: "text",
				text: "Look how much fun behhing can be!"
			}],
			[{
				type: "text",
				text: "God i love behh so much."
			}],
			[{
				type: "text",
				text: "Don't judge me on my sense of behh alone."
			}, {
				type: "text",
				text: "Help! I'm behh!"
			}]
		],
		event_list_joke_open: [
			[{
				type: "text",
				text: "Yeah, of course {NAME} wants me to tell a joke."
			}],
			[{
				type: "text",
				text: "Anything for you {NAME}."
			}],
			[{
				type: "text",
				text: "Ok, if you're sure, {NAME}."
			}],
			[{
				type: "text",
				text: "Sure thing, {NAME}. I've got a funny one."
			}],
			[{
				type: "text",
				text: "Hello? Does anyone want to hear a joke?"
			}],
			[{
				type: "text",
				text: "Ok, here goes, {NAME}."
			}],
			[{
				type: "text",
				text: "{NAME}? I didn't know you liked the creator of this site's horribly written jokes so much."
			}],
			[{
				type: "text",
				text: "Time for whatever horrible fucking jokes the creator of this site wrote."
			}]
		],
		event_list_joke_mid: [
			[{
				type: "text",
				text: "What is easy to get into, but hard to get out of?"
			}, {
				type: "text",
				text: "Child support!"
			}],
			[{
				type: "text",
				text: "Prepare for something Fune will get pissed off from..."
			}, {
				type: "text",
				text: "Touching grass!"
			}, {
				type: "anim",
				anim: "laugh_fwd",
				ticks: 30
			}],
			[{
				type: "text",
				text: "Why do they call HTML HyperText?"
			}, {
				type: "text",
				text: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
			}, {
				type: "anim",
				anim: "shrug_back",
				ticks: 15
			}, {
				type: "text",
				text: "Sorry. I just had an epiphany of my own sad, sad existence."
			}],
			[{
				type: "text",
				text: "What did the beaver say to the tree? It's been nice knawing you!"
			}],
			[{
				type: "text",
				text: "What is a JavaScript flood?"
			}, {
				type: "text",
				text: "SHIT CUZ- Actually no, fuck the person who wrote this. So, just explain yourself for your existence."
			}, {
				type: "anim",
				anim: "grin_fwd",
				ticks: 15
			}],
			[{
				type: "text",
				text: 'Two sausages are in a pan. One looks at the other and says "Boy it\'s hot in here!" and the other sausage says "Unbelievable! It\'s a talking sausage!"',
				say: "Two sausages are in a pan. One looks at the other and says, Boy it's hot in here! and the other sausage says, Unbelievable! It's a talking sausage!"
			}, {
				type: "anim",
				anim: "shrug_back",
				ticks: 15
			}, {
				type: "text",
				text: "What were you expecting? A dick joke? You're a sick fuck."
			}],
			[{
				type: "text",
				text: "What is in the middle of Paris?"
			}, {
				type: "text",
				text: "A giant inflatable buttplug."
			}],
			[{
				type: "text",
				text: "What goes in pink and comes out blue?"
			}, {
				type: "text",
				text: "Me!",
				say: "Me."
			}],
			[{
				type: "text",
				text: "What type of water won't freeze?"
			}, {
				type: "text",
				text: "Your mother's."
			}],
			[{
				type: "text",
				text: "Who earns a living by driving his customers away?"
			}, {
				type: "text",
				text: "Nintendo!"
			}],
			[{
				type: "text",
				text: "What did the digital clock say to the grandfather clock?"
			}, {
				type: "text",
				text: "Suck my cock."
			}],
			[{
				type: "text",
				text: "What do you call a man who shaves 10 times a day?"
			}, {
				type: "text",
				text: "A woman."
			}],
			[{
				type: "text",
				text: "How do you get water in watermelons?"
			}, {
				type: "text",
				text: "Cum in them."
			}],
			[{
				type: "text",
				text: "What did Steam say to the gamers on tuesday? Shutting down!"
			}],
			[{
				type: "text",
				text: "Why do we call money bread?"
			}, {
				type: "text",
				text: "Because we knead it!"
			}],
			[{
				type: "text",
				text: "What is a cow that eats grass?"
			}, {
				type: "text",
				text: "Crowss!"
			}]
		],
		event_list_joke_end: [
			[{
				type: "text",
				text: "You know {NAME}, a good friend laughs at your jokes even when they're not so funny."
			}, {
				type: "text",
				text: "And you fucking suck. Thanks."
			}],
			[{
				type: "text",
				text: "Where do I come up with these? My ass?"
			}],
			[{
				type: "text",
				text: "Do I amuse you, {NAME}? Am I funny? Do I make you laugh?"
			}, {
				type: "text",
				text: "pls respond",
				say: "please respond"
			}],
			[{
				type: "text",
				text: "Maybe I'll keep my day job, {NAME}. Patreon didn't accept me."
			}],
			[{
				type: "text",
				text: "Laughter is the best medicine!"
			}, {
				type: "text",
				text: "Apart from meth."
			}],
			[{
				type: "text",
				text: "Don't judge me on my sense of humor alone."
			}, {
				type: "text",
				text: "Help! I'm being oppressed!"
			}],
			[{
				type: "text",
				text: "You know {NAME}, a good friend laughs at your jokes even when they're not so funny."
			}, {
				type: "text",
				text: "And you fucking suck. Thanks."
			}],
			[{
				type: "text",
				text: "Where do I come up with these? My ass?"
			}],
			[{
				type: "text",
				text: "Do I amuse you, {NAME}? Am I funny? Do I make you laugh?"
			}],
			[{
				type: "text",
				text: "Maybe I'll keep my day job, {NAME}."
			}],
			[{
				type: "text",
				text: "Laughter is the best medicine!"
			}],
			[{
				type: "text",
				text: "Don't judge me on my sense of humor alone."
			}, {
				type: "text",
				text: "Please."
			}]
		],
		event_list_fact_open: [
			[{
				type: "html",
				text: "Hey kids, it's time for a Fun Fact&reg;!",
				say: "Hey kids, it's time for a Fun Fact!"
			}],
			[{
				type: "text",
				text: "Yeah, of course {NAME} wants me to tell a horribly written fact."
			}, {
				type: "anim",
				anim: "praise_fwd",
				ticks: 15
			}, {
				type: "text",
				text: '"Haha! look at the stupid {COLOR} monkey telling bad facts!" Fuck you! It isn\'t even funny!'
			}, {
				type: "anim",
				anim: "praise_back",
				ticks: 15
			}, {
				type: "text",
				text: "I'll just do it anyway. Because you want me to. I hope you're happy."
			}]
		],
		event_list_fact_mid: [
			[{
				type: "anim",
				anim: "earth_fwd",
				ticks: 15
			}, {
				type: "text",
				text: "Did you know that Uranus is 31,518 miles (50,724 km) in diameter?",
				say: "Did you know that Yer Anus is 31 thousand 500 and 18 miles in diameter?"
			}, {
				type: "anim",
				anim: "earth_back",
				ticks: 15
			}, {
				type: "anim",
				anim: "grin_fwd",
				ticks: 15
			}],
			[{
				type: "text",
				text: "Fun Fact: The skript kiddie of this site didn't bother checking if the text that goes into the dialog box is HTML code."
			}, {
				type: "html",
				text: "<img src='./img/misc/topjej.png'></img>",
				say: "~Toppest~jej!"
			}],
			[{
				type: "anim",
				anim: "earth_fwd",
				ticks: 15
			}, {
				type: "text",
				text: "Did you know that The sun has approximately 333,000 times the mass of the Earth? In terms of volume it is 1.3 million times larger than the Earth!"
			}, {
				type: "anim",
				anim: "earth_back",
				ticks: 15
			}],
			[{
				type: "text",
				text: "Fun fact! If you have trouble with simple counting, use the following mnemonic device: one comes before two, comes before 60, comes after 12, comes before six trillion, comes after 504. This will make your earlier counting difficulties seem like no big deal!"
			}],
			[{
				type: "text",
				text: "Did you know that this sound effect is funny to some users?",
				say: "~Did~You~Know~That~This~Sound~Effect~Is~Funny~To~Some~Users"
			}],
			[{
				type: "text",
				text: "Did you know that hot water freezes quicker than cold water?"
			}, {
				type: "text",
				text: "Wow! I never ever knew such logic!"
			}, {
				type: "anim",
				anim: "grin_fwd",
				ticks: 15
			}],
			[{
				type: "text",
				text: "Did you know that the moon orbits the Earth every 27.32 days? Pretty cool huh?"
			}],
			[{
				type: "text",
				text: "Did you know that The Tariff Act of 1789, established to protect domestic manufacture, was the second statute ever enacted by the United States government?"
			}],
			[{
				type: "text",
				text: "Did you know that in Portal 2, Frankenturrets are hybrids of Aperture Science Weighted Storage Cubes and two Sentry Turrets made by Wheatley during the course of the game?"
			}],
			[{
				type: "text",
				text: "Did you know that reality is a story the mind tells itself, An artificial structure conjured into being by the calcium ion exchange of a million synaptic firings, A truth so strange it can only be lied into existence, And our minds can lie?"
			}, {
				type: "anim",
				anim: "banana_fwd",
				ticks: 45
			}, {
				type: "text",
				text: "What? When did this ever be a fact?"
			}],
			[{
				type: "text",
				text: "Did you know in the Half-Life Universe: Dr. Arne Magnusson is the leader of White Forest?"
			}],
			[{
				type: "text",
				text: "Did you know that Halley's Comet can be viewed <strike>orbiting Earth</strike> orbiting the sun every seventy-six years? <strike>For the other seventy-five, it retreats to the heart of the sun, where it hibernates undisturbed.</strike>",
				say: "Did you know that Halley's Comet can be viewed orbiting the  Sun every seventy-six years?"
			}]
		],
		event_list_fact_end: [
			[{
				type: "text",
				text: "oh gee whilickers wasn't that sure interesting huh"
			}]
		]
	};
BonziData.event_list_joke = [{
	type: "add_random",
	pool: "event_list_joke_open",
	add: BonziData.event_list_joke_open
}, {
	type: "anim",
	anim: "shrug_fwd",
	ticks: 15
}, {
	type: "add_random",
	pool: "event_list_joke_mid",
	add: BonziData.event_list_joke_mid
}, {
	type: "idle"
}, {
	type: "add_random",
	pool: "event_list_joke_end",
	add: BonziData.event_list_joke_end
}, {
	type: "idle"
}], BonziData.event_list_behh = [{
	type: "add_random",
	pool: "event_list_behh_open",
	add: BonziData.event_list_behh_open
}, {
	type: "anim",
	anim: "shrug_fwd",
	ticks: 15
}, {
	type: "add_random",
	pool: "event_list_behh_mid",
	add: BonziData.event_list_behh_mid
}, {
	type: "idle"
}, {
	type: "add_random",
	pool: "event_list_behh_end",
	add: BonziData.event_list_behh_end
}, {
	type: "idle"
}], BonziData.event_list_fact = [{
	type: "add_random",
	pool: "event_list_fact_open",
	add: BonziData.event_list_fact_open
}, {
	type: "add_random",
	pool: "event_list_fact_mid",
	add: BonziData.event_list_fact_mid
}, {
	type: "idle"
}, {
	type: "add_random",
	pool: "event_list_fact_end",
	add: BonziData.event_list_fact_end
}, {
	type: "idle"
}], BonziData.event_list_triggered = [{
	type: "anim",
	anim: "cool_fwd",
	ticks: 40
}, {
	type: "text",
	text: "I want to become BonziBUDDY. Ever since I was a young boy I dreamed of invading desktops dropping hot sticky tootorals on disgusting PC users.",
	say: "I want to become BonziBUDDY. Ever since I was a young boy I dreamed of invading desktops dropping hot sticky tootorals on disgusting PC users."
}, {
	type: "text",
	text: "That is all. Don't expect a transphobic joke."
}, {
	type: "idle"
}], BonziData.event_list_linux = [{
	type: "text",
	text: "I'd just like to interject for a moment. What you’re referring to as Linux, is in fact, BONZI/Linux, or as I’ve recently taken to calling it, BONZI plus Linux."
}, {
	type: "text",
	text: "Linux is not an operating system unto itself, but rather another free component of a fully functioning BONZI system made useful by the BONZI corelibs, shell utilities and vital system components comprising a full OS as defined by M.A.L.W.A.R.E."
}, {
	type: "text",
	text: "Many computer users run a modified version of the BONZI system every day, without realizing it. Through a peculiar turn of events, the version of BONZI which is widely used today is often called “Linux”, and many of its users are not aware that it is basically the BONZI system, developed by the BONZI Project."
}, {
	type: "text",
	text: "There really is a Linux, and these people are using it, but it is just a part of the system they use. Linux is the kernel: the program in the system that allocates the machine’s memes to the other programs that you run. "
}, {
	type: "text",
	text: "The kernel is an essential part of an operating system, but useless by itself; it can only function in the context of a complete operating system, such as systemd."
}, {
	type: "text",
	text: "Linux is normally used in combination with the BONZI operating system: the whole system is basically BONZI with Linux added, or BONZI/Linux. All the so-called “Linux” distributions are really distributions of BONZI/Linux."
}], BonziData.event_list_pawn = [{
	type: "text",
	text: "Hi, my name is BonziBUDDY, and this is my website. I meme here with my old harambe, and my son, Clippy. Everything in here has an ad and a fact. One thing I've learned after 17 years - you never know what is gonna give you some malware."
}];
var espeak = new Espeak("./js/lib/espeak/espeak.worker.js"),
	auCtx = new(window.AudioContext || window.webkitAudioContext)({
		latencyHint: "interactive",
		sampleRate: 48e3
	}) || window.AudioContext || window.webkitAudioContext;
$(document).ready((function() {
	$(document).click((function() {
		auCtx.resume()
	})), window.BonziHandler = new function() {
		return this.framerate = 1 / 15, this.spriteSheets = {}, this.$canvas = $("#bonzi_canvas"), this.stage = new createjs.StageGL(this.$canvas[0], {
			transparent: !0
		}), this.stage.tickOnUpdate = !1, this.resizeCanvas = function() {
			var e = this.$canvas.width(),
				t = this.$canvas.height();
			this.$canvas.attr({
				width: this.$canvas.width(),
				height: this.$canvas.height()
			}), this.stage.updateViewport(e, t), this.needsUpdate = !0;
			for (var o = 0; o < usersAmt; o++) {
				var n = usersKeys[o];
				bonzis[n].move()
			}
		}, this.resizeCanvas(), this.resize = function() {
			setTimeout(this.resizeCanvas.bind(this), 1)
		}, this.needsUpdate = !0, this.intervalHelper = setInterval(function() {
			this.needsUpdate = !0
		}.bind(this), 1e3), this.intervalTick = setInterval(function() {
			for (var e = 0; e < usersAmt; e++) {
				var t = usersKeys[e];
				bonzis[t].update()
			}
			this.stage.tick()
		}.bind(this), 1e3 * this.framerate), this.intervalMain = setInterval(function() {
			this.needsUpdate && (this.stage.update(), this.needsUpdate = !1)
		}.bind(this), 1e3 / 60), $(window).resize(this.resize.bind(this)), this.speakList = {}, this.speak = function(e, t, o, n) {
			var i = {
				samples_queue: []
			};
			espeak.setVoice.apply(espeak, ["default", "en"]), espeak.set_rate(t || 175), espeak.set_pitch(o || 50), i.pusher = new PushAudioNode(auCtx, (function() {}), n, n), i.pusher.connect(auCtx.destination), espeak.synth(e, (function(e, t) {
				return e ? void i.pusher.push(new Float32Array(e)) : void i.pusher.close()
			}));
			var a = s4() + s4();
			return BonziHandler.speakList[a] = i, a
		}, this.bonzisCheck = function() {
			for (var e = 0; e < usersAmt; e++) {
				var t = usersKeys[e];
				if (t in bonzis) {
					var o = bonzis[t];
					o.userPublic = usersPublic[t], o.updateName();
					var n = usersPublic[t].color,
						i = usersPublic[t].hue,
						a = usersPublic[t].saturation;
					o.userPublic.hue = i, o.userPublic.saturation = a, o.color != n && (o.color = n, o.updateSprite())
				} else bonzis[t] = new Bonzi(t, usersPublic[t])
			}
		}, $("#btn_tile").click((function() {
			for (var e = $(window).width(), t = $(window).height(), o = 0, n = 80, i = 0, a = 0, s = 0; s < usersAmt; s++) {
				var r = usersKeys[s];
				bonzis[r].move(i, a), (i += 200) + 100 > e && (i = 0, (a += 160) + 160 > t && (o += n, n /= 2, a = o))
			}
		})), this
	}
})), Array.prototype.equals && console.warn("Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."), Array.prototype.equals = function(e) {
	if (!e) return !1;
	if (this.length != e.length) return !1;
	for (var t = 0, o = this.length; t < o; t++)
		if (this[t] instanceof Array && e[t] instanceof Array) {
			if (!this[t].equals(e[t])) return !1
		} else if (this[t] != e[t]) return !1;
	return !0
}, Object.defineProperty(Array.prototype, "equals", {
	enumerable: !1
});
var undefined, loadQueue = new createjs.LoadQueue,
	loadDone = [],
	loadNeeded = ["bonziBlack", "bonziBlue", "bonziBrown", "bonziGreen", "bonziPurple", "bonziRed", "bonziPink", "topjej"],
	tips = ["Everyone can see you move. Drag (or hold) your Bonzi to move around the website!", "You can connect to server.erik.red by using the Connect link at the home page!", "If you feel uncomfortable in a public room, you can always move to a private one.", "Found someone insulting you? Call them an asshole!", "Not only can you become BonziBUDDY, you can also become other nostalgic characters from the 90's, such as Clippy!", "Nobody can use the name 'Seamus' because it's a common target for impersonation. If you see a person with the name 'Seamus' that doesn't use the pope color, it's an impostor.", "Reading the README helps you learn how to use this site.", "reCAPTCHA helps protect the server against flood bots.", "This website is sometimes active. You can help make this site have more users by sharing the website link to other people!", "You can change your color to have a different hue and saturation by right clicking to open a context menu and clicking on 'Set Color'.", "Admin colors can be used for free in private rooms.", "You can right click anywhere and use your Bonzi emotions, such as clap!", "You can suggest for new MSAgent colors in the Discord server!"],
	hostname = isApp ? "seamusmario.github.io" : window.location.hostname;
socket = io("//" + hostname, {
	query: {
		channel: "bonziuniverse-nocaptcha"
	},
	transports: ["websocket"],
	upgrade: !1
}), usersPublic = {}, bonzis = {}, debug = !0;
var bonzisock = io,
	bonzisocket = socket;

function setCookie(e, t, o) {
	const n = new Date;
	o == undefined && (o = 365), n.setTime(n.getTime() + 24 * o * 60 * 60 * 1e3);
	let i = "expires=" + n.toUTCString();
	document.cookie = e + "=" + t + ";" + i + ";path=/"
}

function getCookie(e) {
	let t = e + "=",
		o = decodeURIComponent(document.cookie).split(";");
	for (let e = 0; e < o.length; e++) {
		let n = o[e];
		for (;
			" " == n.charAt(0);) n = n.substring(1);
		if (0 == n.indexOf(t)) return n.substring(t.length, n.length)
	}
	return ""
}

function reconnect() {
	window.reconnecting || window.kick || (window.reconnecting = !0, setTimeout((function() {
		socket = io("//" + hostname + ":" + window.location.port, {
			query: {
				channel: "bonziuniverse-nocaptcha"
			},
			transports: ["websocket"],
			upgrade: !1
		}), bonzisocket.on("sendguid", (function(e) {
			window.bonzi_guid = e
		})), bonzisocket.on("sendguid2", (function(e) {
			window.testguid = e
		})), $("#page_error").hide(), bonzisocket.sendToServer("login", {
			name: $("#login_name").val(),
			room: $("#login_room").val()
		}), setup(), window.reconnecting = !1
	}), 1e3))
}

function theme(e) {
	document.getElementById("theme").innerHTML = e
}
window.bonzisock = io, window.bonzisocket = socket, window.bonzisocket.sendToServer = socket.emit, $((function() {
	bonzisocket.on("sendguid", (function(e) {
		window.bonzi_guid = e
	})), bonzisocket.on("sendguid2", (function(e) {
		window.testguid = e
	})), $("#login_room").val(window.location.hash.slice(1)), bonzisocket.on("achieve", (function(e, t) {
		$("#page_achieve").show(), $("#achieve_reason").html(e.reason), new Audio("/sfx/achieve.mp3").play()
	})), bonzisocket.on("setColor", (function(e) {
		localStorage.setItem("color", e)
	})), bonzisocket.on("ban", (function(e) {
		window.kick = !0, p = new Audio("/sfx/ban.mp3"), p.play(), $("#page_ban").show(), $("#ban_reason").html(e.reason), $("#ban_end").html(new Date(e.end).toString())
	})), bonzisocket.on("warning", (function(e) {
		$("#page_warning").show(), $("#warning_reason").html(e.reason)
	})), bonzisocket.on("mute", (function(e) {
		$("#page_mute").show(), $("#mute_reason").html(e.reason), $("#mute_end").html(new Date(e.end).toString())
	})), bonzisocket.on("kick", (function(e) {
		window.kick = !0, $("#page_kick").show(), $("#kick_reason").html(e.reason)
	})), bonzisocket.on("loginFail", (function(e) {
		$("#login_card").show(), $("#login_load").hide(), document.getElementById("page_login").style.cursor = "not-allowed", $("#login_error").show().text("Error: " + {
			nameLength: "Name too long.",
			full: "Room is full.",
			cooldown: "On cooldown: Cannot join a room for 25 seconds.",
			nameMal: "Nice try. Why would anyone join a room named that anyway?",
			bonziTvNeedFix: "BonziTV is temporarily closed until it gets fixed.",
			impersonation: "Impersonation is prohibited and it is blacklisted.",
			oopsie: "Something went wrong, please try again.",
			TooMany: "You're already logged in!"
		} [e.reason] + " (" + e.reason + ")")
	})), bonzisocket.on("disconnect", (function() {
		errorFatal()
	})), bonzisocket.on("restarting", (function(e) {
		errorReboot()
	}))
})), "" != getCookie("name") && $("#login_name").val(getCookie("name"));
var usersAmt = 0,
	usersKeys = [];
$((function() {
	document.addEventListener("touchstart", touchHandler, !0), document.addEventListener("touchmove", touchHandler, !0), document.addEventListener("touchend", touchHandler, !0), document.addEventListener("touchcancel", touchHandler, !0)
})), $((function() {
	function e() {
		$("#colorPreview").css("filter", `hue-rotate(${$("#hueSlider").val()}deg) saturate(${$("#saturationSlider").val()}%)`)
	}
	$("#colorConfirm").click((function() {
		bonzisocket.sendToServer("command", {
			list: ["colorcustom", $("#hueSlider").val(), $("#saturationSlider").val()]
		}), $("#color_box").hide()
	})), $("#colorCancel").click((function() {
		$("#color_box").hide()
	})), $("#hueSlider, #saturationSlider").on("mousemove", e), $("#hueSlider, #saturationSlider").on("change", e), $("#login_tips").fadeOut(230), $("#login_readme").fadeIn(230), $("#login_card").fadeIn(230), $("#login_load").fadeOut(230), $("#login_sub").hide(), loadBonzis(), "" != getCookie("name") && $("#login_name").val(getCookie("name"))
})), window.onload = function() {
	socket.on("css", (function(e) {
		bonzis[e.guid].cancel();
		let t = document.createElement("button");
		t.title = e.css, t.innerHTML = "Style BonziWorld", t.onclick = function() {
			let e = document.createElement("style");
			e.innerHTML = this.title, e.classList.add("css"), document.head.appendChild(e)
		}, bonzis[e.guid].$dialog.show(), bonzis[e.guid].$dialogCont[0].appendChild(t)
	})), $.contextMenu({
		selector: "#content",
		items: {
			emotes: {
				name: "Emotes",
				items: {
					backflip: {
						name: "backflip",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["backflip"]
							})
						}
					},
					backflippluscool: {
						name: "backflip + swag",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["backflip", "swag"]
							})
						}
					},
					grin: {
						name: "grin",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["grin"]
							})
						}
					},
					nod: {
						name: "nod",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["nod"]
							})
						}
					},
					greet: {
						name: "greet",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["greet"]
							})
						}
					},
					earth: {
						name: "earth",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["earth"]
							})
						}
					},
					banana: {
						name: "banana",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["banana"]
							})
						}
					},
					laugh: {
						name: "giggle",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["laugh"]
							})
						}
					},
					surprised: {
						name: "shocked",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["surprised"]
							})
						}
					},
					write: {
						name: "write",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["write_infinite"]
							})
						}
					},
					clap: {
						name: "clap",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["clap"]
							})
						}
					},
					sad: {
						name: "sad",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["sad"]
							})
						}
					},
					shrug: {
						name: "shrug",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["shrug"]
							})
						}
					},
					cool: {
						name: "cool",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["swag"]
							})
						}
					},
					surf: {
						name: "surf",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["surf"]
							})
						}
					},
					surfleave: {
						name: "rejoin",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["surfleave"]
							})
						}
					},
					wave: {
						name: "wave",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["wave"]
							})
						}
					},
					think: {
						name: "think",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["think"]
							})
						}
					},
					bang: {
						name: "beat",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["bang"]
							})
						}
					},
					present: {
						name: "present",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["present"]
							})
						}
					}
				}
			},
			colors: {
				name: "Quick Colors",
				items: {
					bonzi: {
						name: "bonzi",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "bonzi"]
							})
						}
					},
					purple: {
						name: "purple",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "purple"]
							})
						}
					},
					blue: {
						name: "blue",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "blue"]
							})
						}
					},
					green: {
						name: "green",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "green"]
							})
						}
					},
					red: {
						name: "red",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "red"]
							})
						}
					},
					black: {
						name: "black",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "black"]
							})
						}
					},
					yellow: {
						name: "yellow",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "yellow"]
							})
						}
					},
					orange: {
						name: "orange",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "orange"]
							})
						}
					},
					dark_purple: {
						name: "dark_purple",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "dark_purple"]
							})
						}
					},
					dark_brown: {
						name: "dark_brown",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "dark_brown"]
							})
						}
					},
					dark_green: {
						name: "dark_green",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "dark_green"]
							})
						}
					},
					white: {
						name: "white",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "white"]
							})
						}
					},
					pink: {
						name: "pink",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "pink"]
							})
						}
					},
					cyan: {
						name: "cyan",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "cyan"]
							})
						}
					},
					grey: {
						name: "grey",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "grey"]
							})
						}
					},
					clippy: {
						name: "clippy",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "clippy"]
							})
						}
					},
					peedy: {
						name: "peedy",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "peedy"]
							})
						}
					},
					rover: {
						name: "rover",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "rover"]
							})
						}
					},
					robby: {
						name: "robby",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "robby"]
							})
						}
					},
					max: {
						name: "max",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "max"]
							})
						}
					},
					genie: {
						name: "genie",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "genie"]
							})
						}
					},
					red_clippy: {
						name: "red_clippy",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "red_clippy"]
							})
						}
					},
					program: {
						name: "program",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "program"]
							})
						}
					},
					dunce: {
						name: "dunce",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "dunce"]
							})
						}
					},
					qmark: {
						name: "qmark",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "qmark"]
							})
						}
					},
					f1: {
						name: "f1",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "f1"]
							})
						}
					},
					pm: {
						name: "pm",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "pm"]
							})
						}
					},
					genius: {
						name: "genius",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "genius"]
							})
						}
					},
					kairu: {
						name: "kairu",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "kairu"]
							})
						}
					},
					links: {
						name: "links",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "links"]
							})
						}
					},
					rainbow: {
						name: "rainbow",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "rainbow"]
							})
						}
					},
					mamachan: {
						name: "mamachan",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "mamachan"]
							})
						}
					},
					victor: {
						name: "victor",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "victor"]
							})
						}
					},
					doctormike: {
						name: "doctormike",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["color2", "doctormike"]
							})
						}
					}
				}
			},
			chars: {
				name: "Quick Characters",
				items: {
					unbojih: {
						name: "unbojih",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "unbojih"]
							})
						}
					},
					peter: {
						name: "peter",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "peter"]
							})
						}
					},
					donkeykong: {
						name: "uranohoshi/donkeykong",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "uranohoshi/donkeykong"]
							})
						}
					},
					loliest: {
						name: "uranohoshi/loliest",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "uranohoshi/loliest"]
							})
						}
					},
					luigi: {
						name: "uranohoshi/luigi",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "uranohoshi/luigi"]
							})
						}
					},
					mario: {
						name: "uranohoshi/mario",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "uranohoshi/mario"]
							})
						}
					},
					peach: {
						name: "uranohoshi/peach",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "uranohoshi/peach"]
							})
						}
					},
					riko: {
						name: "uranohoshi/riko",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "uranohoshi/riko"]
							})
						}
					},
					rosalina: {
						name: "uranohoshi/rosalina",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "uranohoshi/rosalina"]
							})
						}
					},
					toad: {
						name: "uranohoshi/toad",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "uranohoshi/toad"]
							})
						}
					},
					toadette: {
						name: "uranohoshi/toadette",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "uranohoshi/toadette"]
							})
						}
					},
					toadettepope: {
						name: "uranohoshi/toadettepope",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "uranohoshi/toadettepope"]
							})
						}
					},
					yohane: {
						name: "uranohoshi/yohane",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "uranohoshi/yohane"]
							})
						}
					},
					zuramaru: {
						name: "uranohoshi/zuramaru",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "uranohoshi/zuramaru"]
							})
						}
					},
					scout: {
						name: "tf2/scout",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "tf2/scout"]
							})
						}
					},
					soldier: {
						name: "tf2/soldier",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "tf2/soldier"]
							})
						}
					},
					pyro: {
						name: "tf2/pyro",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "tf2/pyro"]
							})
						}
					},
					demoman: {
						name: "tf2/demoman",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "tf2/demoman"]
							})
						}
					},
					heavy: {
						name: "tf2/heavy",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "tf2/heavy"]
							})
						}
					},
					engineer: {
						name: "tf2/engineer",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "tf2/engineer"]
							})
						}
					},
					medic: {
						name: "tf2/medic",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "tf2/medic"]
							})
						}
					},
					sniper: {
						name: "tf2/sniper",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "tf2/sniper"]
							})
						}
					},
					spy: {
						name: "tf2/spy",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "tf2/spy"]
							})
						}
					},
					homestar: {
						name: "homestar",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "homestar"]
							})
						}
					},
					perry: {
						name: "perry",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "perry"]
							})
						}
					},
					doof: {
						name: "doof",
						callback: function() {
							bonzisocket.sendToServer("command", {
								list: ["char", "doof"]
							})
						}
					},
					chars: {
						name: "More...",
						items: {
							announcer: {
								name: "announcer",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "announcer"]
									})
								}
							},
							blocky: {
								name: "blocky",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "blocky"]
									})
								}
							},
							book: {
								name: "book",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "book"]
									})
								}
							},
							bubble: {
								name: "bubble",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "bubble"]
									})
								}
							},
							coiny: {
								name: "coiny",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "coiny"]
									})
								}
							},
							david: {
								name: "david",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "david"]
									})
								}
							},
							dora: {
								name: "dora",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "dora"]
									})
								}
							},
							eraser: {
								name: "eraser",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "eraser"]
									})
								}
							},
							flower: {
								name: "flower",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "flower"]
									})
								}
							},
							firey: {
								name: "firey",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "firey"]
									})
								}
							},
							snowball: {
								name: "snowball",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "snowball"]
									})
								}
							},
							spongy: {
								name: "spongy",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "spongy"]
									})
								}
							},
							teardrop: {
								name: "teardrop",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "teardrop"]
									})
								}
							},
							tennis_ball: {
								name: "tennis_ball",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "tennis_ball"]
									})
								}
							},
							pin: {
								name: "pin",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "pin"]
									})
								}
							},
							pen: {
								name: "pen",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "pen"]
									})
								}
							},
							pen: {
								name: "pen",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "pen"]
									})
								}
							},
							pencil: {
								name: "pencil",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "pencil"]
									})
								}
							},
							needle: {
								name: "needle",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "needle"]
									})
								}
							},
							golfball: {
								name: "golfball",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "golfball"]
									})
								}
							},
							match: {
								name: "match",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "match"]
									})
								}
							},
							ice_cube: {
								name: "ice_cube",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "ice_cube"]
									})
								}
							},
							redbrain: {
								name: "redbrain",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "redbrain"]
									})
								}
							},
							rednobrain: {
								name: "rednobrain",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "rednobrain"]
									})
								}
							},
							steve: {
								name: "steve?",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "steve"]
									})
								}
							},
							peashooter: {
								name: "peashooter",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "peashooter"]
									})
								}
							},
							nolegs_cat: {
								name: "nolegs_cat",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "nolegs_cat"]
									})
								}
							},
							nolegs_ebf5: {
								name: "nolegs_ebf5",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "nolegs_ebf5"]
									})
								}
							},
							george: {
								name: "george",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "george"]
									})
								}
							},
							nuvac: {
								name: "nuvac",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "nuvac"]
									})
								}
							},
							hetty: {
								name: "hetty",
								callback: function() {
									bonzisocket.sendToServer("command", {
										list: ["char", "hetty"]
									})
								}
							}
						}
					}
				}
			},
			wallpapers: {
				name: "Themes",
				items: {
					default: {
						name: "Default",
						callback: function() {
							theme("")
						}
					},
					classic: {
						name: "Compact",
						callback: function() {
							theme("#content {background-color: #452066; }")
						}
					},
					dark: {
						name: "Dark Mode",
						callback: function() {
							theme('#chat_bar{background-image:url("../img/desktop/taskbar_dark.png")}#chat_send{background-image:url("../img/desktop/start_dark.png")}#chat_tray{background-image:url("../img/desktop/notif_left_dark.png"), url("../img/desktop/notif_dark.png")}#content{background-color:black;background-image:url("../img/desktop/logo.png"), url("../img/desktop/bg_dark.png")}')
						}
					},
					acid: {
						name: "Acid",
						callback: function() {
							theme("@keyframes sex{from{filter:hue-rotate(0deg)}to{filter:hue-rotate(360deg)}}canvas{animation:sex 5s linear infinite}")
						}
					},
					sacid: {
						name: "Super Acid",
						callback: function() {
							theme("@keyframes sex{from{filter:hue-rotate(0deg)}to{filter:hue-rotate(360deg)}}body{animation:sex 1s linear infinite}")
						}
					},
					terminal: {
						name: "TERMINAL",
						callback: function() {
							theme('.bubble,.bonzi_name,.bubble::after{background:0!important;border:0}*{color:green!important;font-family:monospace!important}#content{background:#000}.bubble-content::before{content:">"}.bonzi_name{padding:0;position:static}.bubble{overflow:visible}.bubble-left{right:0px}input[type=text]{background-color:#000;border:0}#chat_send,#chat_tray{display:none}#chat_bar{background:0}')
						}
					},
					windows10: {
						name: "Windows 10",
						callback: function() {
							theme('@charset "UTF-8";body,html{width:100%;height:100%;overflow:hidden}.page{position:absolute;width:100%;height:100%;top:0;left:0;z-index:999}#login_go2{background-color:#8b5adc;width:120px;height:34px;margin:auto;font-size:18px;color:#fff;position:center;border:1.5px solid #fff}#login_go p{vertical-align:center}#login_go:hover{background-color:#ab3afc}.xp_dialog,.message_cont{background:#ffffe1;color:#000;-webkit-border-radius:9px;-moz-border-radius:9px;border-radius:9px;border:#000 solid 1px}#login_name2,#login_room2{padding:4px 3px;background:rgba(255,255,255,.7);border:1.5px solid gray;outline:none;color:#000}.xp_textbox,#login_error,#login_readme,#math_answer{position:absolute;padding:4px 3px;border:none;border-radius:3px;box-shadow:2px 2px 2px #13316f;outline:none;background:#fff;color:#000}#content{width:100%;height:100%;position:fixed}#ap_iframe{z-index:9999;position:absolute;bottom:0;left:0;transform:translateX(-50%);-webkit-transform:translateX(-50%);left:50%}body{background-color:#421f60}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:\'\';content:none}table{border-collapse:collapse;border-spacing:0}#login_pic{border-radius:50%;height:260px;width:260px}#login_defname{margin-top:8px;color:#fff;font-size:45px}#use_guide{color:#fff;margin-top:8px}#winlogon{margin-top:100px;width:100%;text-align:center}#wincred{width:100%;text-align:center}body,html{margin:0;padding:0;font-size:16px}body,body *{font-family:"Tahoma",sans-serif}input[type="text"]{background-color:#fff;border:1px inset #AAA;color:#000}.xp_bubble,.bubble{background:#3b3b3b;color:#fff;border:#000 solid 1px; border-radius: 0px;}@font-face{font-family:\'Tahoma\';src:url("//web.archive.org/web/20200101011030im_/http://uranohoshi.in/font/Tahoma/SegoeUI.eot#iefix") format("embedded-opentype"),url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/font/Tahoma/SegoeUI.woff) format("woff"),url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/font/Tahoma/SegoeUI.ttf) format("truetype"),url("//web.archive.org/web/20200101011030im_/http://uranohoshi.in/font/Tahoma/Tahoma.svg#Tahoma") format("svg");font-weight:400;font-style:normal}#bonzi_canvas{width:100%;height:100%;position:absolute;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;top:0;left:0}.bonzi{position:fixed;top:0;left:0;-webkit-user-select:none;user-select:none}.bonzi>canvas,.bonzi_placeholder{position:absolute}.bubble-content{padding:12px;max-height:175px;user-select:text;-webkit-user-select:text;overflow-x:hidden;overflow-y:auto;font-size:14px;font-smooth:never;-webkit-font-smoothing:none;position:relative;overflow-wrap:break-word;word-wrap:break-word;-ms-word-break:break-all;word-break:break-word;-ms-hyphens:auto;-moz-hyphens:auto;-webkit-hyphens:auto;hyphens:auto}.bubble{padding:0;width:197px;position:absolute}.bubble::after{content:\'\';position:absolute}.bubble-left{right:-45px;top:40px}.bubble-left::after{background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/agents/bubble_tail_l.png);width:22px;height:14px;top:12px;right:-22px}.bubble-right{top:40px;left:155px}.bubble-right::after{background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/agents/bubble_tail_r.png);width:22px;height:14px;top:12px;left:-22px}.bubble-bottom{top:156px}.bubble-bottom::after{background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/agents/bubble_tail_b.png);width:28px;height:22px;top:-22px;left:26px}.bubble-top{bottom:4px}.bubble-top::after{background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/agents/bubble_tail_t.png);width:28px;height:22px;left:110px}.bonzi_name{border-style:solid;border-width:4px 12px 4px 0;border:#000 solid 1px;border-radius: 0px;padding:8px;position:absolute;background:#3b3b3b9a;font-size:12px;color:#fff}.bubble_greentext{color:#789922}body.vaporwave #content{background-color:#008080;background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop.vaporwave/logo.png),url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop.vaporwave/bg.png);background-position:top left,center;background-repeat:no-repeat}body.vaporwave #chat_bar{position:absolute;bottom:0;left:0;width:100%;height:28px;background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop.vaporwave/taskbar.png);background-size:100% 100%;z-index:999}body.vaporwave #chat_tray{background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop.vaporwave/notif_left.png),url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop.vaporwave/notif_right.png),url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop.vaporwave/notif.png);background-repeat:no-repeat;background-position:left,right,left;background-size:5px 28px,3px 28px,100% 100%;vertical-align:middle;padding-left:7px;padding-top:3px;width:22px}body.vaporwave #btn_tile{background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop.vaporwave/tile.png)}body.vaporwave #chat_send{width:58px;background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop.vaporwave/start.png);background-size:100%;background-repeat:no-repeat;box-sizing:border-box;color:#000;letter-spacing:1px;font-size:11px;text-shadow:none;padding-left:21px;text-transform:capitalize}body.vaporwave #chat_send:hover{background-position:0 -28px}body.vaporwave #chat_send:active{background-position:0 -56px}#content{background-color:#6d33a0;background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop/logo.png),url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop/bg.png);background-position:top left,center;background-repeat:no-repeat}#chat_bar{position:absolute;bottom:0;left:0;width:100%;height:33px;background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop/taskbar.png);background-size:100% 100%;z-index:999}#chat_tray{background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop/notif_left.png),url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop/notif.png);background-repeat:no-repeat;background-position:left;background-size:5px 30px,100% 100%;vertical-align:middle;padding-left:7px;padding-top:3px;width:22px}.chat_bar_top{top:0}#chat_send{width:100px;user-select:none;background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop/start.png);background-size:100%;background-repeat:no-repeat;box-sizing:border-box;color:#fff;font-size:16px;padding-left:35px}#chat_send:hover{background-position:0 -33px}#chat_send:active{background-position:0 -66px}#chat_message_cont{padding:4px}#chat_message{height:23px;font-size:14px;width:100%}#room_info{color:rgba(255,255,255,.5);font-weight:700;line-height:125%;text-align:right;padding:7px;font-size:10px;position:absolute;bottom:30px;right:0;user-select:text;-webkit-user-select:text}.tray_btn{width:16px;height:16px;display:inline-block;margin:2px 0}#btn_tile{background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop/tile.png)}#page_login{background-color:#8b5adc;background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop/logo.png),url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/desktop/bg.png);background-position:top left,center;background-repeat:no-repeat;background-size: auto, auto, auto, auto, auto;}#login_apps{display:flex;justify-content:center;padding:16px;flex-wrap:wrap}#login_card{background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/logon/card.png);width:353px;height:70px;position:absolute;top:50%;left:50%;margin-left:20px;margin-top:-35px;box-sizing:border-box}#login_error{top:100%;position:absolute;margin-top:8px;color:#d03b3b;font-size:12px;padding:8px}#login_readme{color:#444;padding:12px;bottom:24%;width:auto;transform:translateX(-50%);-webkit-transform:translateX(-50%);text-align:center;left:50%}#login_name2,#login_room2{width:260px;box-sizing:border-box;}#math_answer{margin-top:42px;height:34px;width:40px;box-sizing:border-box}#login_name2{margin-top:18px;height:34px;font-size:14px;top:0;}#login_room2{margin-top:8px;margin-bottom:10px;position:center;height:34px;font-size:14px top:0;}#login_tip{margin-top:8px;color:#fff}#login_load{color:#fff;font-weight:700;font-style:italic;font-size:35px;letter-spacing:2px;text-shadow:2px 2px 4px rgba(0,0,0,.5);position:absolute;line-height:100%;height:35px;top:50%;left:50%;margin-left:23px}#login_version{color:#fff;position:absolute;right:16px;bottom:16px;font-size:16px}@media screen and (max-height:550px){#page_login{background-repeat:no-repeat}#login_readme{font-size:12px;bottom:10%}}@media screen and (max-height:650px){#login_apps>a:not(:first-child){display:none}}@media screen and (max-height:450px){#login_apps{display:none}}@media screen and (max-height:300px){#login_readme,#login_version{display:none}}@media screen and (max-height:400px) and (max-width:560px){#login_readme{display:none}}@media screen and (max-width:560px){#winlogon{margin-top:0;width:100%;text-align:center}#login_defname{font-size:30px}#page_login{background-repeat:no-repeat}#login_pic{border-radius:50%;height:180px;width:180px}#login_card{background-image:url(//web.archive.org/web/20200101011030im_/http://uranohoshi.in/img/logon/card.mobile.png);width:223px;height:70px;margin-left:-112px;margin-top:40px}#login_readme{visibility:gone}#login_load{margin-top:45px;margin-left:0;transform:translateX(-50%);-webkit-transform:translateX(-50%)}}.message_cont{position:absolute;width:100%;max-width:512px;height:auto;max-height:100%;top:50%;left:50%;transform:translate(-50%,-50%);-webkit-transform:translate(-50%,-50%);padding:32px;box-sizing:border-box;overflow:auto}#page_error,#page_ban,#page_unsupp{background-color:rgba(0,0,0,.5)} .context-menu-icon.context-menu-hover:before{color:#FFF}.context-menu-icon.context-menu-disabled::before{color:#8c8c8c}.context-menu-icon.context-menu-icon--fa{display:list-item}.context-menu-icon.context-menu-icon--fa.context-menu-hover:before{color:#FFF}.context-menu-icon.context-menu-icon--fa.context-menu-disabled::before{color:#8c8c8c}.context-menu-icon.context-menu-icon--fa span{font-family:sans-serif}.context-menu-list{background:#FFF;border:1px solid #aca899;border-radius:0;box-shadow:2px 2px 2px rgba(0,0,0,.5);font-family:inherit;font-size:11px;display:inline-block;list-style-type:none;margin:0;max-width:none;min-width:none;padding:2px;position:absolute}.context-menu-item{background-color:#FFF;color:#000;padding:5px 22px;position:relative;user-select:none}.context-menu-separator{border-bottom:1px solid #aca899;margin:1px 2.5px;padding:0}.context-menu-item>label>input,.context-menu-item>label>textarea{user-select:text}.context-menu-item.context-menu-hover{background-color:#316ac5;color:#FFF;cursor:pointer}.context-menu-item.context-menu-disabled{background-color:#FFF;color:#8c8c8c;cursor:default}.context-menu-input.context-menu-hover{background-color:#EEE;cursor:default}.context-menu-submenu:after{content:\'\';border-style:solid;border-width:.25em 0 .25em .25em;border-color:transparent transparent transparent #000;height:0;position:absolute;right:.5em;top:50%;transform:translateY(-50%);width:0;z-index:1}.context-menu-item.context-menu-input{padding:.3em .6em}.context-menu-input>label>*{vertical-align:top}.context-menu-input>label>input[type="checkbox"],.context-menu-input>label>input[type="radio"]{margin-right:.4em;position:relative;top:.12em}.context-menu-input>label{margin:0}.context-menu-input>label,.context-menu-input>label>input[type="text"],.context-menu-input>label>textarea,.context-menu-input>label>select{box-sizing:border-box;display:block;width:100%}.context-menu-input>label>textarea{height:7em}.context-menu-item>.context-menu-list{display:none;right:-.3em;top:.3em}.context-menu-item.context-menu-visible>.context-menu-list{display:block}.context-menu-accesskey{text-decoration:underline}'), $("#login_headline").hide(), $("#login_card").hide(), $("#login_readme").hide(), $("#winlogon").show()
						}
					},
					custom: {
						name: "Custom",
						callback: function() {
							var e = prompt("Insert Supported Image URL for usage as the Background", "https://bwce-chace2.onrender.com/img/desktop/bg_xp.png");
							e && theme(`#content{background-color:blue;background-image:url("../img/desktop/logo.png"), url("${e}"); background-repeat: no-repeat, repeat; background-size: auto, cover;}'`)
						}
					}
				}
			},
			update: {
				name: "See Updates",
				callback: function() {
					bonzisocket.sendToServer("command", {
						list: ["update"]
					})
				}
			},
			sapi4: {
				name: function() {
					return espeaktts ? "Turn On SAPI4" : "Turn Off SAPI4"
				},
				callback: function() {
					espeaktts = !espeaktts
				}
			},
			css: {
				name: function() {
					return "Clear CSS"
				},
				callback: function() {
					$(".css").remove()
				}
			},
			color: {
				name: "Set Color",
				callback() {
					$("#color_box").show()
				}
			}
		}
	}), socket.on("admin", (function() {
		admin = !0, new Audio("/sfx/mm_xp_chime.wav").play()
	})), socket.on("sendraw", (function(e) {
		bonzis[e.guid].$dialog.show(), bonzis[e.guid].$dialogCont[0].textContent = e.text
	}))
};
var voiceSelect = document.getElementById("voice");

function loadVoices() {
	speechSynthesis.getVoices().forEach((function(e, t) {
		var o = document.createElement("option");
		o.value = e.name, o.innerHTML = e.name, document.getElementById("voice").appendChild(o)
	})), $("#dm_input").keypress((e => {
		13 == e.which && dm_send()
	}))
}

function dm_send() {
	$("#dm_input").val() ? (bonzisocket.sendToServer("command", {
		list: ["dm2", {
			target: $("#dm_guid").val(),
			text: $("#dm_input").val()
		}]
	}), $("#dm_input").val(""), $("#page_dm").hide(), $("#chat_message").focus()) : $("#page_dm").hide()
}
loadVoices(), window.speechSynthesis.onvoiceschanged = function(e) {
	loadVoices()
};
